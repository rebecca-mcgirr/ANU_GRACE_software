#!/bin/csh -f

# script to plot a time series of the difference between positions and velocities of two GTORB files
#
# P. Tregoning
# 15 November 2013

gmt gmtset FONT_TITLE 10    >& /dev/null
gmt gmtset FONT_LABEL   15  >& /dev/null
gmt gmtset PAPER_MEDIA a4+  >& /dev/null
gmt gmtset PROJ_LENGTH_UNIT cm  


if ($#argv == 0) then
  echo "sh_plot_postfit -sat A/B -f plt_test.kb -x xmin xmax -y_X etc -yvel_X etc -yanot_X etc -xanot 100f20 -yvelanot_X 0.1 etc -yanot_all 0.4f0.1"
  exit
endif

# set default values
set xmin = 1
set xmax = 18000
set xanot = "2000f500"
# positions
set ymin_X = -0.04
set ymax_X =  0.04
set ymin_Y = -0.04
set ymax_Y =  0.04
set ymin_Z = -0.04
set ymax_Z =  0.04
set yanot_X = "0.030"
set yanot_Y = "0.030"
set yanot_Z = "0.030"

# velocities
set yvelmin_X = -1
set yvelmax_X =  1
set yvelmin_Y = -1
set yvelmax_Y =  1
set yvelmin_Z = -1
set yvelmax_Z =  1
set yvelanot_X = "1f0.5"
set yvelanot_Y = "1f0.5"
set yvelanot_Z = "1f0.5"

# KBRR
set ymin_kbrr = -10
set ymax_kbrr =  10
set yanot_kbrr = 4f2

# output type
set out_type = "XYZ" 

set postfit_file = "none"
set overlay_file = "none"

# satellite
set sat = "A"

# colours
set overlay_colour = "255/0/255"

##################### DECIPHER COMMAND LINE #######################
while ($#argv > 0 )
  set input = ( $argv )
  switch($input[1])
# x-axis
    case -x:
      set xmin = $input[2] ; shift argv  
      set xmax = $input[3] ; shift argv
    breaksw
    case -xanot:
      set xanot = $input[2]
    breaksw
# output type
    case -out:
      set out_type = $input[2] ; shift argv  
    breaksw
# satellite
    case -sat:
      set sat = $input[2] ; shift argv  
    breaksw
#  prefit residual file
    case -f:
    case -postfit:
      set postfit_file = $input[2] ; shift argv  
    breaksw
# overlay file
    case -o:
      set overlay_file = $input[2] ; shift argv  
    breaksw
# positions
    case -yanot_all:
      set yanot_X = $input[2] ; shift argv
      set yanot_Y = $yanot_X
      set yanot_Z = $yanot_X
      set yvelanot_X = $yanot_X
      set yvelanot_Y = $yanot_X
      set yvelanot_Z = $yanot_X
    breaksw
    case -y_X:
      set ymin_X = $input[2] ; shift argv  
      set ymax_X = $input[3] ; shift argv
    breaksw
    case -y_Y:
      set ymin_Y = $input[2] ; shift argv  
      set ymax_Y = $input[3] ; shift argv
    breaksw
    case -y_Z:
      set ymin_Z = $input[2] ; shift argv  
      set ymax_Z = $input[3] ; shift argv
    breaksw
    case -yanot_X:
      set yanot_X = $input[2]
    breaksw
    case -yanot_Y:
      set yanot_Y = $input[2]
    breaksw
    case -yanot_Z:
      set yanot_Z = $input[2]
    breaksw
# velocities
    case -yvel_X:
      set yvelmin_X = $input[2] ; shift argv  
      set yvelmax_X = $input[3] ; shift argv
    breaksw
    case -yvel_Y:
      set yvelmin_Y = $input[2] ; shift argv  
      set yvelmax_Y = $input[3] ; shift argv
    breaksw
    case -yvel_Z:
      set yvelmin_Z = $input[2] ; shift argv  
      set yvelmax_Z = $input[3] ; shift argv
    breaksw
    case -yvelanot_X:
      set yvelanot_X = $input[2] ; shift argv
    breaksw
    case -yvelanot_Y:
      set yvelanot_Y = $input[2] ; shift argv
    breaksw
    case -yvelanot_Z:
      set yvelanot_Z = $input[2] ; shift argv
    breaksw
    case -xanot:
      set xanot = $input[2] ; shift argv
    breaksw
# all axes the same
    case -y_all:
    # positions
      set ymax_X = $input[2] ; shift argv  
      set ymin_X = `echo $ymax_X | awk '{print -1 * $1}'`
      set ymin_Y = $ymin_X
      set ymax_Y = $ymax_X
      set ymin_Z = $ymin_X
      set ymax_Z = $ymax_X
    # velocities
      set yvelmin_X = $ymin_X
      set yvelmax_X = $ymax_X
      set yvelmin_Y = $ymin_X
      set yvelmax_Y = $ymax_X
      set yvelmin_Z = $ymin_X
      set yvelmax_Z = $ymax_X
    # annotations
      set yanot_X = $ymax_X
      set yanot_Y = $ymax_X
      set yanot_Z = $ymax_X
      set yvelanot_X = $ymax_X
      set yvelanot_Y = $ymax_X
      set yvelanot_Z = $ymax_X
    breaksw
# kbrr axes
    case -y_kbrr:
      set ymin_kbrr = $input[2] ; shift argv  
      set ymax_kbrr = $input[3] ; shift argv
    breaksw
    case -yanot_kbrr:
      set yanot_kbrr = $input[2] ; shift argv
    breaksw    
 endsw
  if ( $#argv > 0 ) shift argv
end
alldone:
######################################################################
set outfile = postfit_${sat}.ps

if ($postfit_file == "none")then
  echo "Error: must specify an input postfit residual file (plt_?.kb format). Use -f filename"
  exit
endif
# set the output labels
if ($out_type == "ACR")then
  set ylabel = ("A/Track" "C/Track" "Radial" )
else if ($out_type == "NEU") then
  set ylabel = ("North"  "East" "Up")
else
  set ylabel = ("X" "Y" "Z")
endif



# plot the postfit residuals from the input file
if ($postfit_file != "none" && $out_type == "XYZ")then
  echo "Extracting postfit pos/vel residuals from kb file " $postfit_file
#  tail -n+7 $kb_file | awk '{if ($13 != 0.0 && $14 != 0.0) {print $1, $13, $14, $15, $16, $17, $18}}' > gracefit.out
# PT140507: this line will read the values from the last 12 columns of the plt*.kb file, but these are actually prefit residuals!!! 
# tail -n+7 $postfit_file | awk '{print $1, $13, $14, $15, $16 * 1000, $17 * 1000, $18 * 1000, $19, $20, $21, $22 * 1000, $23 * 1000, $24 * 1000}' > gracefit.out
# PT140507: reading from the file created by GRACEFIT if the plot option is "1" rather than "4"
#  tail -n+10 $postfit_file | awk '{print $1, $2 / 1000, $3/ 1000, $4/ 1000, 0.0, 0.0, 0.0}' > gracefit.out
# PT150810: use cols 25-36 of plt*.kb file to get the postfit pos/vel residuals
tail -n+10 $postfit_file | awk '{print $1, $25, $26, $27, $28 * 1000, $29 * 1000, $30 * 1000, $31, $32, $33, $34 * 1000, $35 * 1000, $36 * 1000}' > gracefit.out

endif
if($sat == "A" || $sat == "C")then
  awk '{print $1, $2}' gracefit.out > post_pos.X
  awk '{print $1, $3}' gracefit.out > post_pos.Y
  awk '{print $1, $4}' gracefit.out > post_pos.Z
  awk '{print $1, $5 }' gracefit.out > post_vel.X
  awk '{print $1, $6 }' gracefit.out > post_vel.Y
  awk '{print $1, $7 }' gracefit.out > post_vel.Z
endif
if($sat == "B" || $sat == "D")then  
  awk '{print $1, $8}' gracefit.out > post_pos.X
  awk '{print $1, $9}' gracefit.out > post_pos.Y
  awk '{print $1, $10}' gracefit.out > post_pos.Z
  awk '{print $1, $11}' gracefit.out > post_vel.X
  awk '{print $1, $12}' gracefit.out > post_vel.Y
  awk '{print $1, $13}' gracefit.out > post_vel.Z
endif

# the overlay file (if there is one to plot)
if ($overlay_file != "none" && $out_type == "XYZ")then
  echo "Extracting prefit pos/vel residuals from overlay file " $overlay_file
  tail -n+2 $overlay_file | awk '{print $1, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16}' > gracefit_overlay.out
endif
if($sat == "A" && $overlay_file != "none")then
  awk '{print $1, $2}' gracefit_overlay.out > overlay_pos.X
  awk '{print $1, $3}' gracefit_overlay.out > overlay_pos.Y
  awk '{print $1, $4}' gracefit_overlay.out > overlay_pos.Z
  awk '{print $1, $5 }' gracefit_overlay.out > overlay_vel.X
  awk '{print $1, $6 }' gracefit_overlay.out > overlay_vel.Y
  awk '{print $1, $7 }' gracefit_overlay.out > overlay_vel.Z
endif
if($sat == "B" && $overlay_file != "none")then  
  awk '{print $1, $8}'  gracefit_overlay.out > overlay_pos.X
  awk '{print $1, $9}'  gracefit_overlay.out > overlay_pos.Y
  awk '{print $1, $10}' gracefit_overlay.out > overlay_pos.Z
  awk '{print $1, $11}' gracefit_overlay.out > overlay_vel.X
  awk '{print $1, $12}' gracefit_overlay.out > overlay_vel.Y
  awk '{print $1, $13}' gracefit_overlay.out > overlay_vel.Z
endif


set dy = "-3.9"

set proj = "-JX17/3.5"
# plot the position along/cross/radial
gmt psxy post_pos.X $proj -R$xmin/$xmax/$ymin_X/$ymax_X -Ba${xanot}/${yanot_X}:"Pos $ylabel[1] (m)"::." Sat $sat, $postfit_file":nesW -Wthick,0/0/255 -X2.5 -Y22.3 -K -P > $outfile
gmt psxy post_pos.Y $proj  -R$xmin/$xmax/$ymin_Y/$ymax_Y -Ba${xanot}/${yanot_Y}:"Pos $ylabel[2] (m)":nesW -Wthick,0/0/255 -Y$dy -O -K >> $outfile
gmt psxy post_pos.Z $proj  -R$xmin/$xmax/$ymin_Z/$ymax_Z -Ba${xanot}/${yanot_Z}:"Pos $ylabel[3] (m)":nesW -Wthick,0/0/255 -Y$dy -O -K >> $outfile
# overlay file
if ($overlay_file != "none") then
  gmt psxy overlay_pos.X $proj  -R$xmin/$xmax/$ymin_Y/$ymax_Y -Ba${xanot}/${yanot_Y}:"Pos $ylabel[2] (m)":nesW -Wthick,$overlay_colour -Y`echo $dy | awk '{print -2 * $1}'` -O -K >> $outfile
  gmt psxy overlay_pos.Y $proj  -R$xmin/$xmax/$ymin_Y/$ymax_Y -Ba${xanot}/${yanot_Y}:"Pos $ylabel[2] (m)":nesW -Wthick,$overlay_colour -Y$dy -O -K >> $outfile
  gmt psxy overlay_pos.Z $proj  -R$xmin/$xmax/$ymin_Z/$ymax_Z -Ba${xanot}/${yanot_Z}:"Pos $ylabel[3] (m)":nesW -Wthick,$overlay_colour -Y$dy -O -K >> $outfile
endif

# plot the velocity along/cross/radial
gmt psxy post_vel.X $proj  -R$xmin/$xmax/$yvelmin_X/$yvelmax_X -Ba${xanot}/${yvelanot_X}:"Vel $ylabel[1] (mm/s)":nesW -Wthick,0/0/255 -Y$dy   -O -K >> $outfile
gmt psxy post_vel.Y $proj  -R$xmin/$xmax/$yvelmin_Y/$yvelmax_Y -Ba${xanot}/${yvelanot_Y}:"Vel $ylabel[2] (mm/s)":nesW -Wthick,0/0/255 -Y$dy -O -K >> $outfile
gmt psxy post_vel.Z $proj  -R$xmin/$xmax/$yvelmin_Z/$yvelmax_Z -Ba${xanot}/${yvelanot_Z}:"Vel $ylabel[3] (mm/s)":neSW -Wthick,0/0/255 -Y$dy -O  -K >> $outfile
# overlay file
if ($overlay_file != "none") then
  gmt psxy overlay_vel.X $proj  -R$xmin/$xmax/$yvelmin_X/$yvelmax_X -Ba${xanot}/${yvelanot_X}:"Vel $ylabel[1] (mm/s)":nesW -Wthick,$overlay_colour -Y`echo $dy | awk '{print -2 * $1}'` -O -K >> $outfile
  gmt psxy overlay_vel.Y $proj  -R$xmin/$xmax/$yvelmin_Y/$yvelmax_Y -Ba${xanot}/${yvelanot_Y}:"Vel $ylabel[2] (mm/s)":nesW -Wthick,$overlay_colour -Y$dy -O -K >> $outfile
  gmt psxy overlay_vel.Z $proj  -R$xmin/$xmax/$yvelmin_Z/$yvelmax_Z -Ba${xanot}/${yvelanot_Z}:"Vel $ylabel[3] (mm/s)":neSW -Wthick,$overlay_colour -Y$dy -O  >> $outfile
endif

# plot the kbrr prefit

gs $outfile


