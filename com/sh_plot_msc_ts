#!/bin/csh -f

# script to plot a time series of EWH for a particular latitude/longitude. The script will use the ANU solution
# of raijin processing (August 2019) and the GSFC mascon solution - both uncorrected for GIA, so they should both
# be compatible
#
# P. Tregoning
# 29 August 2019
#
# PT191024: add the option of plotting the CSR mascons as well

if ($#argv == 0)then
  echo "sh_plot_msc_ts -crd lat lon [-mean 2002 2020 -x xmin xmax -y ymin ymax -use_GSFC Y/N -yanot 1000f500 -xanot 4f2 -msc_file ~/gg/grace/tables/mascons_stage4_V002 -plot Rg/Grn/Arctic/Ant/local -series '_G0.5_A0.5' -CSR Y/N -n_series 2 _tikh400 -large Y/N -constraint ~/fft/files/msc_batch5z_zeroapr_iter2.WRMS ]"
  exit
endif

######### Defaults ##########
set version = ~/gt
set lat = 69. 
set lon = 311.
set xmin = 2002
set xmax = 2020
set ymin = -3500
set ymax = 1500
set xanot = 4f2
set yanot = 1000f500
set use_GSFC = Y
set msc_file = ~/gg/grace/tables/mascons_stage4_V003a
set mean_min = 2003
set mean_max = 2004
set remove_mean = "N"
set plot_type = "local"
set series = ""
set model = "N"
set CSR = "Y"
set GSFC = "Y"
set n_series = 1
set series_2 = "ABC"
set large = "Y"
set constraint_file = "~/fft/files/msc_batch5z_zeroapr_iter2.WRMS"
#############################


##################### DECIPHER COMMAND LINE #######################
while ($#argv > 0 )
  set input = ( $argv )
  switch($input[1])
    case -y:
      set ymin = $input[2] ; shift argv  
      set ymax = $input[3] ; shift argv
    breaksw
    case -yanot:
      set yanot = $input[2]
    breaksw
    case -x:
      set xmin = $input[2] ; shift argv  
      set xmax = $input[3] ; shift argv
    breaksw
    case -xanot:
      set xanot = $input[2]
    breaksw
    case -mean:
      set mean_min = $input[2] ; shift argv  
      set mean_max = $input[3] ; shift argv
      set remove_mean = "Y"
    breaksw
    case -crd*:
      set lat = $input[2] ; shift argv  
      set lon = $input[3] ; shift argv
    breaksw
    case -msc_file:
    case -f:
      set msc_file = $input[2]
    breaksw
    case -use_GSFC:
      set use_GSFC = $input[2]
    breaksw
    case -version:
      set version = $input[2]
    breaksw
    case -plot*:
      set plot_type = $input[2]
    breaksw
    case -series:
      set series = $input[2]
    breaksw
    case -CSR:
      set CSR = $input[2]
    breaksw
    case -GSFC:
      set GSFC = $input[2]
    breaksw
    case -large:
      set large = $input[2]
    breaksw
    case -model:
      set model = "Y"
      set model_file = $input[2]
    breaksw
    case -n_series:
      set n_series = $input[2]
      set series_2 = $input[3]
    breaksw
    case -constraint:
      set constrain_file = $input[2]
    breaksw
 endsw
  if ( $#argv > 0 ) shift argv
end
alldone:
######################################################################


#########################
##                     ##
##    ANU mascons      ##
##                     ##
#########################
# identify the ANU primary mascon number in which the requested lat/lon resides
set msc_tern = `$version/util/which_mascon $lat $lon | tail -1 | awk '{print $8}'`
set msc_prim = `grep $msc_tern"  T" $msc_file | awk '{if ($1 == '$msc_tern') {printf "%5.5d", $10}}'`
set tern_density = `grep $msc_tern"  T" $msc_file | awk '{if ($1 == '$msc_tern') {print $9}}'`
echo $lat $lon lies in primary mascon $msc_prim , ternary mascon $msc_tern , density $tern_density

if($tern_density == 1000.)then
  set density = "Land"
else
  set density = "Ocean"
endif

# extract the time series for this primary mascon from the ANU solutions 
set msc = `echo $msc_prim | awk '{printf "MC%5.5d", $1}'`
\rm ANU_${msc}.dat >& /dev/null ; touch ANU_${msc}.dat
foreach file (/scratch/compute1/pault/grace/raijin_results/fft/20??/addnorm_????_??_fft${series}.fit)
  set epoch = `echo $file | /usr/bin/cut -c63-69`
  set ymd = `echo $epoch | awk '{print substr($0,1,4), substr($0,6,2), 15}'`
  set dec_yr = `doy $ymd | tail -1 | awk '{print $3}'`

  grep $msc $file | awk '{print '$dec_yr', $6*1.e3, $7*1.e3}' >> ANU_${msc}.dat
end

if($remove_mean == "Y")then
  cat ANU_${msc}.dat | awk '{if ($1 > '$mean_min' && $1 <= '$mean_max' ) {print $2}}' > anu.tmp #'
  set mean = `w_mean anu.tmp no_weights | grep "The  mean is" | awk '{print $4}'`
  cat ANU_${msc}.dat | awk '{print $1, $2 - '$mean', $3}' > anu.tmp ; mv anu.tmp ANU_${msc}.dat
  echo removed mean value of $mean from ANU time series over range $mean_min $mean_max
endif

echo ANU mascon EWH range information: `gmt gmtinfo  ANU_${msc}.dat`

##########################
##                      ##
##    GSFC mascons      ##
##                      ##
##########################
# identify the GSFC primary mascon number in which the requested lat/lon resides
$version/util/GSFC_to_apr_v2.4 $msc_file -99 $lat $lon | grep "GSFC soln for mascon" > gsfc_msc.tmp
set GSFC_msc = `tail -1 gsfc_msc.tmp | awk '{print $6}'`
echo Location $lat $lon is in GSFC mascon $GSFC_msc
tail -n+14 time_group.dat | awk '{print $3}' > tmp
paste tmp gsfc_msc.tmp > GSFC_${GSFC_msc}.dat

if($remove_mean == "Y")then
  cat GSFC_${GSFC_msc}.dat | awk '{if ($1 > '$mean_min' && $1 <= '$mean_max' ) {print $2}}' > gsfc.tmp
#'
  set mean = `w_mean gsfc.tmp no_weights | grep "The  mean is" | awk '{print $4}'`
  cat GSFC_${GSFC_msc}.dat | awk '{print $1, $2 - '$mean'}' > gsfc.tmp ; mv gsfc.tmp GSFC_${GSFC_msc}.dat
  echo removed mean value of $mean from GSFC time series over range $mean_min $mean_max
endif
echo GSFC mascon EWH range information: `gmt gmtinfo  GSFC_${GSFC_msc}.dat`



##########################
##                      ##
##    CSR  mascons      ##
##                      ##
##########################
if ($CSR == "Y")then
  echo "processing the CSR mascons ..."
  python plot_CSR.py $lat $lon | awk '{print substr($0,1,4), substr($0,6,2), substr($0,9,2), $3}' > csr.tmp
  set csr_yr  = `cat csr.tmp | awk '{print $1}'`
  set csr_mon = `cat csr.tmp | awk '{print $2}'`
  set csr_day = `cat csr.tmp | awk '{print $3}'`
  set csr_ewh = `cat csr.tmp | awk '{print $4}'`
  set n_epochs = `echo $csr_ewh | wc -w`

  echo There are $n_epochs epochs of CSR mascon data

  set iepoch = 1
  \rm msc_csr.dat >& /dev/null ; touch msc_csr.dat
  while ($iepoch <= $n_epochs)
    set dec_yr = `doy $csr_yr[$iepoch] $csr_mon[$iepoch] $csr_day[$iepoch] | tail -1 | awk '{print $3}'`
    echo $dec_yr $csr_ewh[$iepoch]  >> msc_csr.dat
    @ iepoch = $iepoch + 1
  end

  if($remove_mean == "Y")then
    cat msc_csr.dat | awk '{if ($1 > '$mean_min' && $1 <= '$mean_max' ) {print $2}}' > msc_csr.tmp
#'
    set mean = `w_mean msc_csr.tmp no_weights | grep "The  mean is" | awk '{print $4}'`
    cat msc_csr.dat | awk '{print $1, $2 - '$mean'}' > msc_csr.tmp ; mv msc_csr.tmp msc_csr.dat
    echo removed mean value of $mean from CSR time series over range $mean_min $mean_max
  endif
  echo CSR mascon EWH range information: `gmt gmtinfo  msc_csr.dat`

endif

echo "n_series = " $n_series
if($n_series == 1)goto skip_series2

echo "Getting series 2 for ANU solutions" $series_2
#################################
##                             ##
##    ANU mascons Series 2     ##
##                             ##
#################################
# identify the ANU primary mascon number in which the requested lat/lon resides
set msc_tern = `$version/util/which_mascon $lat $lon | tail -1 | awk '{print $8}'`
set msc_prim = `grep $msc_tern"  T" $msc_file | awk '{if ($1 == '$msc_tern') {printf "%5.5d", $10}}'`
set tern_density = `grep $msc_tern"  T" $msc_file | awk '{if ($1 == '$msc_tern') {print $9}}'`
echo $lat $lon lies in primary mascon $msc_prim , ternary mascon $msc_tern , density $tern_density

if($tern_density == 1000.)then
  set density = "Land"
else
  set density = "Ocean"
endif

# extract the time series for this primary mascon from the ANU solutions 
set msc = `echo $msc_prim | awk '{printf "MC%5.5d", $1}'`
\rm ANU_${msc}_series2.dat >& /dev/null ; touch ANU_${msc}_series2.dat
foreach file (/scratch/compute1/pault/grace/raijin_results/fft/20??/addnorm_????_??_fft${series_2}.fit)
  set epoch = `echo $file | /usr/bin/cut -c63-69`
  set ymd = `echo $epoch | awk '{print substr($0,1,4), substr($0,6,2), 15}'`
  set dec_yr = `doy $ymd | tail -1 | awk '{print $3}'`

  grep $msc $file | awk '{print '$dec_yr', $6*1.e3, $7*1.e3}' >> ANU_${msc}_series2.dat
end

if($n_series == 3) then
\rm ANU_${msc}_series3.dat >& /dev/null ; touch ANU_${msc}_series3.dat
  set series_3 = "_6zJulia_iter0"
  echo Getting solution $series_3
  foreach file (/scratch/compute1/pault/grace/raijin_results/fft/20??/addnorm_????_??_fft${series_3}.fit)
    set epoch = `echo $file | /usr/bin/cut -c63-69`
    set ymd = `echo $epoch | awk '{print substr($0,1,4), substr($0,6,2), 15}'`
    set dec_yr = `doy $ymd | tail -1 | awk '{print $3}'`

    grep $msc $file | awk '{print '$dec_yr', $6*1.e3, $7*1.e3}' >> ANU_${msc}_series3.dat
  end
  cat ANU_${msc}_series3.dat | awk '{if ($1 > '$mean_min' && $1 <= '$mean_max' ) {print $2}}' > anu.tmp #'
  set mean = `w_mean anu.tmp no_weights | grep "The  mean is" | awk '{print $4}'`
  cat ANU_${msc}_series3.dat | awk '{print $1, $2 - '$mean', $3}' > anu.tmp ; mv anu.tmp ANU_${msc}_series3.dat
  echo removed mean value of $mean from ANU time series 3 over range $mean_min $mean_max
endif

if($remove_mean == "Y")then
  cat ANU_${msc}_series2.dat | awk '{if ($1 > '$mean_min' && $1 <= '$mean_max' ) {print $2}}' > anu.tmp #'
  set mean = `w_mean anu.tmp no_weights | grep "The  mean is" | awk '{print $4}'`
  cat ANU_${msc}_series2.dat | awk '{print $1, $2 - '$mean', $3}' > anu.tmp ; mv anu.tmp ANU_${msc}_series2.dat
  echo removed mean value of $mean from ANU time series 2 over range $mean_min $mean_max
endif

echo ANU mascon EWH series 2 range information: `gmt gmtinfo  ANU_${msc}_series2.dat`
endif
skip_series2:


plot:
set outfile = ${msc}.ps
set range = "-R"$xmin/$xmax/$ymin/$ymax

if ($large == "N")then
 set proj = "-JX11.5/5"
 set yshift = 22
else if ($large == "Y")then
 set proj = "-JX15/12"
 set yshift = 15
endif




# ANU time series
#add_segments ANU_${msc}.dat tmp.dat ; mv tmp.dat ANU_${msc}.dat
echo Plot ANU series $series
gmt psxy ANU_${msc}.dat -W3,red  $proj $range -Ba${xanot}:"Year":/${yanot}:"EWH (mm)"::."$series Mascon $msc_prim ,  lat $lat lon $lon $density":neSW -X2.7 -Y$yshift -P -K > $outfile
gmt psxy ANU_${msc}.dat -Gred -Sc0.1 $proj $range -O -K -Ey0.0  >> $outfile
if($n_series == 2 || $n_series == 3) then
  echo Plot ANU series $series_2
  gmt psxy ANU_${msc}_series2.dat -W1,green  $proj $range -O -K >> $outfile
  gmt psxy ANU_${msc}_series2.dat -Ggreen -Sc0.1 $proj $range -O -K -Ey0.0  >> $outfile
endif

if($n_series == 3)then
  echo Plot ANU series $series_3
  gmt psxy ANU_${msc}_series3.dat -W1,brown  $proj $range -O -K >> $outfile
  gmt psxy ANU_${msc}_series3.dat -Gbrown -Sc0.1 $proj $range -O -K -Ey0.0  >> $outfile
endif
  
# GSFC time series
gmt psxy GSFC_${GSFC_msc}.dat -W2,black $proj $range -O -K >> $outfile
gmt psxy GSFC_${GSFC_msc}.dat -Gblack -Sc0.1 $proj $range -O -K >> $outfile

# CSR time series
gmt psxy msc_csr.dat -W1,blue $proj $range -O -K >> $outfile
gmt psxy msc_csr.dat -Gblue -Sc0.1 $proj $range -O -K >> $outfile



#####################
##                 ##
## modelled values ##
##                 ##
#####################
# pt190926: plot the modelled value (from _test1_V002 solutions) if requested
if($model == "Y")then
  echo plotting a prori mascon modelled values
  \rm msc_modelled.dat >& /dev/null ; touch msc_modelled.dat
  set msc_model = `grep ${msc} $model_file | awk '{print $3, $4, $5, $6, $7, $8}'`
  echo Mascon Model: $msc_model

  set iepoch = 1
  while ($iepoch < 200)
    set dt = `echo $iepoch | awk '{printf "%15.6f", $1 / 12.0}'`
    set modelled_val = `echo $dt $msc_model | awk '{printf "%15.4f\n", $2 + $1*$3 + $4*sin(2.0*3.1415*$1) + $5*cos(2.0*3.1415*$1) + $6*$1*$1 +$7*$1*$1*$1}'`
    echo $dt $modelled_val | awk '{printf "%15.6f %15.4f\n", 2002.9 + $1, $2}' >> msc_modelled.dat
    @ iepoch = $iepoch + 1
  end
  if($remove_mean == "Y")then
    cat msc_modelled.dat | awk '{if ($1 > '$mean_min' && $1 <= '$mean_max' ) {print $2}}' > modelled.tmp
#'
    set mean = `w_mean modelled.tmp no_weights | grep "The  mean is" | awk '{print $4}'`
    cat msc_modelled.dat | awk '{print $1, $2 - '$mean'}' > modelled.tmp ; mv modelled.tmp msc_modelled.dat
  endif
endif

if($model == "Y")then
  gmt psxy msc_modelled.dat -W2,orange $proj $range -O -K >> $outfile
endif

# plot a small map to show where the point was
# determine the projection based on what was requested by the user
set coast_res = "-Dc"
if($plot_type == "Rg")then
  set proj = "-JR30/6"
  set range = "-Rg"
else if ($plot_type == "Ant" || $plot_type == "ant")then
  set proj = "-JS0/-89.9/35/5"
  set range = "-R0/360/-90/-55"
else if ($plot_type == "Arctic")then
  set proj = "-JS0/89.9/35/5"
  set range = "-R0/360/55/90"
else if ($plot_type == "Grn")then
  set proj = "-JR320/5.5"
  set range = "-R280/350/56/87"
else if ($plot_type == "local")then
  set proj = "-JR$lon/8"
  set plot_lon = `echo $lon | awk '{printf "%6.1f %6.1f",$1 - 15, $1 + 15}'`
  set plot_minlat = `echo $lat | awk '{if ($1 < -75) {print -90.} else {print $1 - 15.}}'`
  set plot_maxlat = `echo $lat | awk '{if ($1 > 75) {print 90.} else {print $1 + 15.}}'`
  set range = "-R"$plot_lon[1]/$plot_lon[2]/$plot_minlat/$plot_maxlat
  echo "Plot range for local is" $range
else if ($plot_type == "zoom")then
  set proj = "-JR$lon/5"
  set plot_lon = `echo $lon | awk '{printf "%6.1f %6.1f",$1 - 5, $1 + 5}'`
  set plot_minlat = `echo $lat | awk '{if ($1 < -75) {print -90.} else {print $1 - 5.}}'`
  set plot_maxlat = `echo $lat | awk '{if ($1 > 75) {print 90.} else {print $1 + 5.}}'`
  set range = "-R"$plot_lon[1]/$plot_lon[2]/$plot_minlat/$plot_maxlat
  set coast_res = "-Dh"
  echo "Plot range for local is" $range
endif

if ($large == "Y") then
  gmt pscoast $proj $range -W1,grey $coast_res -A100000 -O -K -X+3 -Y-13 -Ba10000nesw >> $outfile
else
  gmt pscoast $proj $range -W1,grey $coast_res -A100000 -O -K -X+11.8 -Y+0 -Ba10000nesw >> $outfile
endif
gmt psxy $proj $range -Sc0.2 -Gred -O  -K << end >> $outfile
$lon $lat
end

# find the mascon constraint that was applied in the inversions
set msc_constraint = `head -$msc_prim $constraint_file | tail -1 | awk '{print $3}'`
echo Mascon constraint was $msc_constraint $constraint_file
#gmt pstext -JX6/4 -R0/1/0/1 -Y+6 -O << end >> $outfile
#0.4 0.4 Msc Constraint: $msc_constraint
#end


gs $outfile

exit







