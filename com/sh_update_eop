#!/bin/csh -f
#
#doc Get IERS BULL_A finals.data or finals.daily from USNO and create pmu, ut1., and pole. files
#doc 
#
# This version by R. King based on sh_update_eop.130210 from 1999 but hardwired
#   for wget or curl, and does not support Bulletin B (maybe no longer working in earlier version)

######################## INSTRUCTIONS #############################
# See if arguments passed
if( $#argv == 0 ) then
  echo "===================================================================================="
  echo " Get BULL_A Pole and UT1 tables.  " 
  echo "  "
  echo " There are two modes of use: "
  echo "  "
  echo " (1) Always get new tables regardless of current tables ranges (if no date entered)"
  echo " (2) Get new tables if the requested date is outside the range of the current tables"
  echo "  "
  echo " Usage: sh_update_eop -series <eops> -jd <jd> -yr <yr> -doy <doy> -perror <val> -pmax <num> -min <min> -noftp <Y/N> "
  echo "  "
  echo "        <eops>  is pole and ut1 series to be downloaded and checked. [Required] "
  echo "                For near realtime processing use usnd which contains on recent"
  echo "                values (last 3 months) but is updated daily"
  echo "        <jd>    is julian day of data to be processed. [Optional] "
  echo "                                    OR "
  echo "        <yr & doy>  are the year and day of year of data to be processed. [Optional]"
  echo "  "      
  echo "        <num> is the maximum number of predicted values allowed [Default = 8].  The -perror"
  echo "              value is checked before applying this limit.  If <num> is increased, then perror"
  echo "              may also need to be increased" 
  echo "        <val> is the maximum predicted value error allowed (arc secs) when "
  echo "              writing predicted values into the bull_a tables. [Default 0.01] "   
  echo "              NOTE: pmax has precidence over perror."
  echo "        <min> update the eop file if there are fewer than min entries after"
  echo "              the date given [default 7 (also min allowed for interp.) and consistent with --pmax default]." 
  echo "        -noftp = Y Don't attempt to ftp updates, just check existing files. [Default = N]"
  echo "  "      
  echo " Examples: sh_update_eop -series usno -yr 1998 -doy 235 "
  echo "           sh_update_eop -series usno -jd 2451048 "
  echo "           sh_update_eop -series usno -perror 0.01 "
  echo "           sh_update_eop -series usno "
  echo "  "
  echo "===================================================================================="
  exit
endif 

##################### SET UP DEFAULTS #############################   
set eop_date = `echo 0 | awk '{printf" %d %d \n", $1, $1}'`
set eops = ''
set jd = ''
set year = ''
set yr = ''
set doy = ''  
set geteop = no
set perror = 0.01  
set pmax = 8 
set noftp = 'N'
set pre_tol = 3
set post_tol = 3
# Added by MAF (2015-03-25, MIT)
if ( `which wget` != '' ) then  # wget available
  set prog = 'wget -nv -N'
else if ( `which curl` != '' ) then  # curl available
  set prog = 'curl -# -L -R -O'
else  # Neither wget nor curl available
  echo 'Neither wget nor curl available to download IERS Bulletin A tables. Exiting...' && exit 1
endif
# END: Added by MAF (2015-03-25, MIT)

##################### DECIPHER COMMAND LINE #######################   
while ($#argv > 0 )
  set input = ( $argv )
  switch($input[1])
    case -s*:
      set eops  = $input[2]  
    breaksw 
    case -j*:
      set jd = `echo $input[2] | awk '{printf" %d \n", $1}'`  
    breaksw 
    case -y*:
      set year = $input[2]
# Variable yr[1] = 4 char yr, yr[2] = 2 char yr, yr[3] = 1 char yr
      set yr = `sh_year -year $year`
    breaksw 
    case -d*:
      set doy = $input[2]  
    breaksw 
    case -pe*:
      set perror = $input[2]  
    breaksw 
    case -pm*:
      set pmax = $input[2]  
    breaksw 
    case -min*:
      set post_tol = $input[2]
      if ( $post_tol < 3 ) set post_tol = 3  
    breaksw 
    case -noftp:
      set noftp = $input[2]  
    breaksw 
  endsw
  if ( $#argv > 0 ) shift argv
end
alldone:

######## CHECK for dates  ############################

#Check required fields
if ( ${eops} == '' ) then
  echo "Required fields not complete:- series: $eops --Stop "
  exit 1
endif

# No dates given ALWAYS get new tables 
if ( $jd != '' || $year != '' ) then

# Date given as yr and doy convert to jd 
  if ( $jd == '' && $year != '' ) then
    set jd   = `doy $yr[1] $doy | tail -n -3 | head -n 1 | awk '{printf" %d \n", $8}'`
  endif

# Get the span of values in the EOP files
  if ( -e  pole.${eops} ) then
    set eop_date = `head -n 2 pole.${eops} | tail -n -1 | awk '{printf" %d %d \n", $2, $3}'`
  endif

# Add 2 and subtract 3 days from observation jd to allow for interpolation.
  set jdb = `echo $jd | awk '{printf" %d \n", ($1 - pre_tol)}' pre_tol=$pre_tol `
  set jde = `echo $jd | awk '{printf" %d \n", ($1 + post_tol)}' post_tol=$post_tol `

# Check the start and stop time of the EOP file against observations date
# Download new EOP series if out of range
  if ( $jdb <= $eop_date[1] || $jde >= $eop_date[2] ) then
    if ( $jdb <= $eop_date[1] ) then
      echo "Observations before start date of current eop series table: ${eops}"
      if ( ${noftp} != 'Y' ) then
        echo "Attempting to get new series "
        set geteop = yes
      else
        echo "-noftp = ${noftp} : Unable to get new series. Stop "
        exit -1
      endif
    else if ( $jde >= $eop_date[2] ) then
      echo "Observations after end date of current eop series table: ${eops}"
      if ( ${noftp} != 'Y' ) then
        echo "Attempting to get new series " 
        set geteop = yes 
      else
        echo "-noftp = ${noftp} : Unable to get new series. Stop "
        exit -1
      endif
    endif 
  else
    echo "Observations within the span of the current eop series table: ${eops}"
    echo "Not attempting to get new series "
  endif

# No input dates input so get new tables regardless
else if ( ${noftp} != 'Y' ) then
  set geteop = yes
else 
  echo "-noftp = ${noftp} : Unable to get new series. Stop"
endif

#### Get the files from USNO and create the pmu file for GLOBK and input to ERPTAB #####

if($geteop == 'yes')then 
   
  if( $eops == 'usno' ) then    
    \rm finals.data
# HM201112
#    $prog ftp://cddis.gsfc.nasa.gov/pub/products/iers/finals.data || $prog http://maia.usno.navy.mil/ser7/finals.data || $prog http://toshi.nofs.navy.mil/ser7/finals.data 
    $prog https://datacenter.iers.org/data/8/finals.data
    
    set curr_date = `date | awk '{print $3, $2, $6, $4}'`
    set file_date = `ls -l finals.data | awk '{print $6,$7,$8}'`
    echo '*Bulletin A values from finals.data ('$file_date')' >! pmu.${eops}.pe${perror}   
    awk '{print " ",substr($0,1,2),substr($0,3,2),substr($0,5,2)," 0 "," 0 ",substr($0,18,10),substr($0,28,9),substr($0,37,10),substr($0,47,9),substr($0,59,10),substr($0,69,10),substr($0,17,1)}' finals.data |\
     awk '{if (($12 != "P" || ($12 == "P" && $7 <= mpe && $9 <= mpe)) && NF == 12) {print $0} }' mpe=$perror >> pmu.${eops}.pe${perror} 
  else if( $eops == 'usnd' ) then
    \rm finals.daily 
# HM201112
#    $prog http://maia.usno.navy.mil/ser7/finals.daily || $prog http://toshi.nofs.navy.mil/ser7/finals.daily || $prog ftp://cddis.gsfc.nasa.gov/pub/products/iers/finals.daily
    $prog https://datacenter.iers.org/data/12/finals.daily
    
    set curr_date = `date | awk '{print $3, $2, $6, $4}'`
    set file_date = `ls -l finals.daily | awk '{print $6,$7,$8}'`
    echo '*Bulletin A values from finals.daily ('$file_date')' >! pmu.${eops}.pe${perror}
    awk '{print " ",substr($0,1,2),substr($0,3,2),substr($0,5,2)," 0 "," 0 ",substr($0,18,10),substr($0,28,9),substr($0,37,10),substr($0,47,9),substr($0,59,10),substr($0,69,10),substr($0,17,1)}' finals.daily |\
     awk '{if (($12 != "P" || ($12 == "P" && $7 <= mpe && $9 <= mpe)) && NF == 12) {print $0} }' mpe=$perror >> pmu.${eops}.pe${perror} 
  else
    echo "Update option for ${eops}  eop series is not coded "
    echo "EOP series is out of date --Stop "
    exit 1
  endif     
                                  
# Set maximum number of predicted values
  cat pmu.${eops}.pe${perror} | grep -v 'P$' >! pmu.${eops}.no_prediction  
  cat pmu.${eops}.pe${perror} | grep 'P$' | head -n ${pmax}  >! tmp.eop_${pmax}
  cat  pmu.${eops}.no_prediction tmp.eop_${pmax} >! pmu.${eops}
  \rm tmp.eop_${pmax}
  echo " "
  echo "Maximum error of predicted values allowed in the BULL_A files is: $perror " 
  echo " "

#####  Create the GAMIT ut1 and pole files from the pmu file #####
#
  echo "Converting pmu.${eops} to GAMIT format - files will be ut1.${eops} pole.${eops} "
  echo " "
  echo pmu.${eops}    >! erptab.inp
  echo ut1.${eops}    >> erptab.inp
  echo pole.${eops}   >> erptab.inp 
  if ( $eops == 'usno' ) then
    echo 'Bulletin A values from USNO finals.data ('$file_date') ' >> erptab.inp
  else if ( $eops == 'usnd' ) then
    echo 'Bulletin A values from USNO finals.daily ('$file_date') ' >> erptab.inp
  endif
  echo n             >> erptab.inp

# Link leap.sec to current directory
  if ( ! -e leap.sec ) ln -s ~/gg/tables/leap.sec leap.sec

  erptab < erptab.inp > /dev/null
 
  echo "Files: ut1.${eops} and pole.${eops} created "
  echo " "
  echo "#######################################################################"
  echo "# WARNING ut1.${eops} and pole.${eops} tables created contain predicted #"
  echo "# values. The max predicted formal sigma allowed was $perror arc sec   #"
  echo "# Search for "P" in the pmu.${eops} file to find the date where pole   #"
  echo "# UT1 predictions begin.                                              #"
  echo "#######################################################################"
  echo " "

  \rm erptab.inp

endif

if ( ( $jd != '' || $year != '' ) && $geteop == yes  ) then
# Check that requested date is within the range values in the new downloaded EOP files. 
  set eop_date = `head -n 2 pole.${eops} | tail -n -1 | awk '{printf" %d %d \n", $2, $3}'`

# Check again the start and stop time of the EOP file against observations date
# Stop if still out of range
  if ( $jd <= $eop_date[1] ) then
    echo "Observations before start date of eop series"
    echo "Archive files do not start before requested date --Stop"
    exit 1
  else if ( $jd >= $eop_date[2] ) then
    echo "Observations after end date of eop series"
    echo "Archive files end before requested date --Stop"
    exit 1
  endif
endif

# The end
exit
