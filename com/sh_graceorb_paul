#!/bin/bash -f

# Script to run graceorb to integrate both satellites
#
# MODS :
#  PT130414: change the rationale of piping "in_file" so that there is one each for GRACE A and GRACE B and
#            that graceorb opens and reads them. Also, change files like "SCA.dat" to "SCA_A.dat" and "SCA_B.dat" etc
#  PT130726: add option to just generate the input files (and not run graceorb or gracefit)
#  PT170509: add the creation of the atmospheric dealiasing file that has the atm tide removed

   if [ $# -lt 9 ]
   then
    more << EOF

    sh_graceorb   is a bash shell script to run the
    GRACE orbit integration program and gracefit to
    determine ICS, accelerometer biases and solve
    for mascons

    Usage: sh_graceorb   -t <year> <month> <day> <hr> <min> <sec> <duration> -n<#> [ -f[i/a] <file>  -gracefit -cmd <file> ]
       eg: sh_graceorb  "-t 2005 3 7 0 0 0 11500 -n 1 -gracefit -cmd gracefit.cmd -angles_A roll/pitch/yaw -angles_B roll/pitch/yaw -setup -version <~/ga or ~/gt>"

    where: -n specifies the number of consecutive integrations of the specified duration

           -t specify the year, month, day, hour, min, sec of start time and
              duration of integration *in seconds* (not the number of steps)

           -fi specifies file with input ICs if required.
           -fa specifies file with IC adjustments if required.

           -gracefit  will run gracefit on the resulting GTORB files generated by graceorb
           -gracefit_cmd gracefit.cmd will run gracefit using the specified file "[default is gracefit.cmd]"
           -graceorb_cmd GRACE.input will run graceorb using the specified file "[default is GRACE.input]"
           -angles_A  roll/pitch/yaw error angles to apply to GRACE A in the orbit integration
           -angles_B  roll/pitch/yaw error angles to apply to GRACE B in the orbit integration
           -setup     only create the input files for graceorb, do not actually run it
           -version   version of software to use (i.e. ~/ga or ~/gt)
EOF
   exit
   fi
   # Add links necessary to setup a new day:
   ln -s ~/gt/com/time_extract.awk .
   ln -s ~/gg/grace/tables/def_grav.dat .
   ln -s ~/gg/grace/tables/usno.finals.data .
   ln -s ~/gg/grace/tables/desaicoeff .
   ln -s ~/GRACE/tables/mascons_stage4_350km_700km_0.2_0.1_0.5.reg .
   ln -s ~/GRACE/tables/mascons_stage4_350km_700km_0.5_0.1_0.5_0.1.reg .
   cp    ~/gg/grace/templates/GRACE.input.template GRACE.input 
   cp    ~/gg/grace/templates/gracefit.cmd.template . 
   ln -s ~/gg/grace/tables/atm_tide_stokes.hs .
   ln -s ~/gg/grace/tables/GOCE.deg200 .

   ln -s ~/gg/grace/tables/JPLEPH  .
   echo "--------- Running sh_graceorb   --------->"
   ICadj='0' 
   ICinp='0' 
   run_gracefit="N"
   gracefit_cmdfile="gracefit.cmd"
   graceorb_cmdfile="GRACE.input"
   roll_A=0
   pitch_A=0
   yaw_A=0
   roll_B=0
   pitch_B=0
   yaw_B=0
   setup_only="N"
   tide_model="eot11a"
   version=~/gt

#  read in command line arguments (format given above)

   while [ $# -gt 0 ]
   do
     case $1
     in
       -t)
         year=$2
         month=$3
         day=$4
         hr=$5
         min=$6
         sec=$7
         durn=$8
         shift 8
         echo Requested integration: $year $month $day $hr $min $sec $durn
       ;;

       -angles_A)
         roll_A=$2
         pitch_A=$3
         yaw_A=$4
         shift 4
       ;;

       -angles_B)
         roll_B=$2
         pitch_B=$3
         yaw_B=$4
         shift 4
       ;;

       -n)
         rpt=$2
	 echo "n" $rpt
         shift 2
       ;;

       -fa)
         ICadj=$2
         shift 2
       ;;
       -fi)
         ICinp=$2
         shift 2
       ;;
       -gracefit)
         run_gracefit="Y"
         shift 2             # PT170509: changed from 1 to 2
       ;;
       -gracefit_cmd)
         gracefit_cmdfile=$2
         shift 2
       ;;
       -graceorb_cmd)
         graceorb_cmdfile=$2
         shift 2
       ;;
       -setup)
         setup_only="Y"
	 echo "steop_only"
         shift 2             # PT170509: changed from 1 to 2
       ;;
       -tide_model)
         tide_model=$2
         shift 2
       ;;
       -version)
         version=$2
         shift 2
       ;;
   esac
   done
   echo Completed decoding command line inputs
   echo version = $version

# PT131028: define the suffix of just the date
   suffix_date=${year}-${month}-${day}
   suffix_nextdate=`date -d "${suffix_date} 1 days" +%Y-%m-%d`
   suffix_prevdate=`date -d "${suffix_date} -1 days" +%Y-%m-%d`

   if [ $ICadj != '0' ] 
   then
     echo "     ICs corrected using: ${ICadj} " 
   fi

   if [ $ICinp != '0' ] 
   then
     echo "     Using ICs from file: $ICinp} " 
   fi

   if [ $run_gracefit == "Y" ]
   then
     echo "     Will run gracefit after graceorb"
   fi

#  if year less than or equal to 2004, use RL00, otherwise use RL02 data
# PT130517: over-rule this now, use RL02 for everything
   if [ $year -le 2004 ]
   then
     RL='RL02'
     RL_num='02'
   else
     RL='RL02'
     RL_num='02'
   fi

   echo "     Using $RL GRACE data" $roll_A $pitch_A $yaw_A 

#  read in relevant information from GRACE.input file
   static_field=$(grep MOD_STATIC_FIELD $graceorb_cmdfile | awk '{print $3}')
   ocean_tide=$(grep MOD_OCEAN_TIDE     $graceorb_cmdfile | awk '{print $3}')
   atm_tide=$(grep MOD_ATM_TIDE         $graceorb_cmdfile | awk '{print $3}')
   dealias=$(grep MOD_DEALIAS           $graceorb_cmdfile | awk '{print $3}')
   tim=$(grep INT_TIME_INTERVAL         $graceorb_cmdfile | awk '{print $3}')
# PT121101: get the mascon, dealias and data directores from the GRACE input file rather than users editing this scrit
   datadir=$(grep DATA_DIR              $graceorb_cmdfile | awk '{print $3}')
   mascon_dir=$(grep MASCON_DIR         $graceorb_cmdfile | awk '{print $3}')
   dealiasdir=$(grep DEALIAS_DIR        $graceorb_cmdfile | awk '{print $3}')
   echo "     Integration step size is: $tim seconds"

#  Copy the relevant tables from GAMIT tables directory

   sh_GRACE.table.links -frame J2000 -year $year -eop usno ut1 pole

#  Determine whether the duration is a whole number of minutes
#  (this allows for consecutive integrations to be performed without a time gap) 

   let moddurn=$durn%60
   if [ $moddurn -ne 0 ]
   then
     echo "The integration duration is not a whole number of minutes"
     echo "Duration will be extended to the next whole number of minutes"
     echo "Continue (y/n)?"
     read cont
     if [ "$cont" != "y" ]
     then
       echo "Exiting sh_graceorb  "
       exit 
     else
       if [ "$cont" == "y" ] 
       then
         durn=$(($durn+(60-$moddurn)))
         echo "New duration is $durn seconds"
       fi 
     fi
   fi
   
   steps=$(($durn/$tim))
   echo "     The total number of integration steps is : $steps"

#  calculate seconds of day for initial start time of first integration
   sodi=`echo $hr $min $sec | awk '{print $1*60*60 + $2 *60 + $3}'`
# PT130107: this doesn't work for hr = 08 ... don't know why!
#   sodi=$((($hr*60*60)+($min*60)+$sec))
   echo sodi = $sodi
   modsodi=$(($sodi%60))
   if [ $modsodi -ne 0 ]
   then
     echo "Adjusting time to nearest (earlier) "whole" minute to match GRACE GPS data interval"
     sodi=$(($sodi-$modsodi))
     echo "New start time is $sodi"
   fi

#  check that the runs do not cross a day boundary
#   sodf=$(($sodi+$durn*$rpt)) 
#   if [ $sodf -gt 86400 ]
#   then
#     moddurn=$((86400%$durn))
#     if [ $moddurn -ne 0 ]
#     then
#       echo "Individual integrations cannot cross day boundary"
#       echo "Adjust integration duration or repeats"
#       exit
#     fi
#   fi

#  calculate the hr, min and sec for the adjusted initial start time (sodi)

   sodstrt=$sodi
   secn=$(($sodi%60))
   mintn=$((($sodi-$secn)/60))
   minn=$(($mintn%60))
   hrn=$((($mintn-$minn)/60))
   echo $year $month $day $hrn $minn

#  call doy and get it to return GRACE seconds for adjusted start date/time

   strt=$(doy $year $month $day $hrn $minn | grep GRACE | awk '{print $6}')
   strt=${strt/\.*}
   strt=$(($strt+$secn))
   echo "Integration start time: $strt"

#  ****************************************************************************
#  ***************start looping through repeat integrations*********************
#  *****************************************************************************

   COUNTER=1
   while [ $COUNTER -le $rpt ]
   do
     i=$COUNTER
     if [ $i -gt 1 ]
     then
       strt=$(($strt+$tim*$steps))
# set (adjusted) start time for the 'i'th integration
     fi

     echo "     This is $i out of a total $rpt integrations"
     echo " "

#    call doy to return the year month day for this GRACE start time
     doy ${strt}g | grep Date
     datearrayi=( `doy ${strt}g | grep Date | awk '{print substr($2,1,4), substr($2,6,2), substr($2,9,2), $3}'` ) 
     year=${datearrayi[0]}
     month=${datearrayi[1]}
     day=${datearrayi[2]}
     echo "Integration start date: " $year $month $day

#    calculate the end time of the current integration

     endt=$(($strt+$durn))

#    call doy to return the year month day for the end time of this integration

     datearrayf=( `doy ${endt}g | grep Date | awk '{print substr($2,1,4), substr($2,6,2), substr($2,9,2), $3}'` )     
     yearf=${datearrayf[0]}
     monthf=${datearrayf[1]}
     dayf=${datearrayf[2]}
     echo "Integration end date: " $yearf $monthf $dayf

#    calculate the end time of the current integration *plus 6 hours*

     endt=$(($strt+$durn+21600))

#    call doy to return the year month day for the end time of this integration

     datearrayf6=( `doy ${endt}g | grep Date | awk '{print substr($2,1,4), substr($2,6,2), substr($2,9,2), $3}'` )
     yearf6=${datearrayf6[0]}
     monthf6=${datearrayf6[1]}
     dayf6=${datearrayf6[2]}
     echo "Integration end date + 6 hrs... " $yearf6 $monthf6 $dayf6

     record_dir=$datadir/${RL}/${year}
     suff=${year}-${month}-${day}_${RL_num}
     record_tar=$record_dir/grace_1B_${suff}.tar.gz
       if [ -e $record_tar ]
       then
         echo "untarring data files..."
       else
         echo Input Level-1B data file does not exist: $record_tar    
         echo sh_graceorb halted.
         exit
       fi

     tar -xvf $record_tar > tar.txt
     rm tar.txt
     echo "done"

########################
#### Satellite Loop ####
########################

     for k in A B
     do

       echo "Checking Initial Conditions"
       suffix=${year}-${month}-${day}_${k}_${RL_num}
       GPS_file=GNV1B_${suffix}
       KBR_file=KBR1B_${year}-${month}-${day}_X_${RL_num}

# convert GPS data file to ascii format

       echo "extracting GPS ascii file..."
# PT121101: check that the data file exists. If not, exit.
       if [ -e ${GPS_file}.dat ] 
       then
         echo ${GPS_file}.dat found
       else
         echo Input Level-1B data file does not exist: ${GPS_file}.dat
         echo sh_graceorb halted.
         exit
       fi

# PT121101: we should just assume that this software exists, or we should provide it in gg/grace ?
       Bin2AsciiLevel1.e -binfile ${GPS_file}.dat  -ascfile ${GPS_file}.asc
       
       echo "done"

       if [ $ICinp != '0' ]
       then

# extract the ICs from input IC's file if requested

         ICarray=(`grep -h "^${k} ${strt}" $ICinp | head -1 | awk '{print $1, $4, $5, $6, $10, $11, $12}'`)
         echo "Using input ICs from file " $ICinp
         echo "GRACE ${k} ICS (m): "${ICarray[@]}   

       else 

#Otherwise we attempt to extract the ICs from the GPS data file 

# check that the integration start time has a corresponding entry in the GPS data file
# if not then we will have to integrate from an earlier time step up to the integration
# start time to obtain ICs

         ICtest=(`grep -h "^${strt}" ${GPS_file}.asc | wc -l`)
         if [ $ICtest -eq 0 ]
         then
           echo "WARNING: Start time ${strt} not found in GPS file ${GPS_file}.asc"
           echo "Initiating search for ICs..."

# Check the first non-null entry of the current GPS file
# PT121101: put all the sed and awk commands here rather than in external files
#           GPStest=$((`sed -f header.sed ${GPS_file}.asc | head -1 | awk -f init.awk start=$strt`))
           GPStest=$((`sed /^ *[A-Za-z]/d ${GPS_file}.asc | head -1 | awk '{if ( $1 >= '$strt' ) { printf("%g\n", 1) } else { printf("%g\n", 0) }}'`))
           echo GPStest is: $GPStest
           if [ $GPStest -gt 0 ]
           then

# If the first entry in the current GPS file post-dates our start time then we will have 
# to open the previous day's GPS file and search for ICs there

#             GPSstrt=$((`sed -f header.sed ${GPS_file}.asc | head -1 | awk '{print $1}'`))
             GPSstrt=$((`sed /^ *[A-Za-z]/d ${GPS_file}.asc | head -1 | awk '{print $1}'`))
             echo "WARNING: Start time ${strt} precedes first epoch in ${GPS_file}.asc: (${GPSstrt})"
             echo "Searching for last available time step in the immediately previous day."
             strt_init=$((${strt}-86400))
 datearray_init=( `doy ${strt_init}g | grep Date | awk '{print substr($2,1,4), substr($2,6,2), substr($2,9,2), $3}'` ) 

# repeat data extraction for previous day's GPS file

             year_init=${datearray_init[0]}
             month_init=${datearray_init[1]}
             day_init=${datearray_init[2]}
             record_init_dir=$datadir/${RL}/${year_init}
             suff_init=${year_init}-${month_init}-${day_init}_${RL_num}
             suffix_init=${year_init}-${month_init}-${day_init}_${k}_${RL_num}
             record_init_tar=$record_dir/grace_1B_${suff_init}.tar.gz
             echo "untarring previous day... $year_init $month_init $day_init"
             tar -xvf $record_init_tar > tar.txt
             rm tar.txt
             echo "done"
             GPS_file2=GNV1B_${suffix_init}
             echo "Converting GPS record to ascii"

             Bin2AsciiLevel1.e -binfile ${GPS_file2}.dat  \
                                             -ascfile ${GPS_file2}.asc
             echo "done"
           else

# otherwise we just search for ICs in the current GPS file

             GPS_file2=${GPS_file}
             year_init=${year}
             month_init=${month}
             day_init=${day}
           fi

# Step backwards in increments of one minute until we find a valid GPS entry

           target_time=$((${strt}-60))
           let target=(`grep -h "^${target_time}" ${GPS_file2}.asc | wc -l | awk '{print $1}'`)
           while [ ${target} -eq 0 ]
           do
             target_time=$((${target_time}-60))
             let target=(`grep -h "^${target_time}" ${GPS_file2}.asc | wc -l | awk '{print $1}'`)
             interval=$((${strt} - ${target_time}))
             if [ $interval -gt 86400 ]
             then
               echo "ERROR: Earliest ICs are more than 24 hrs before integration start!"
               echo "Aborting integration"
               exit
             fi
            
           done

# IF the latest ICs are found more than one day before the start time of the integration
# then we have a serious problem

           if [ $interval -gt 86400 ]
           then
             echo "ERROR: Earliest ICs found more than 10 minutes before integration start!"
             echo "Aborting integration"
             exit
           fi
           echo target_time = $target_time 
#           hrmin=( `doy ${target_time}g | grep Date | awk -f time_extract.awk string=0` )
           hrmin=( `doy ${target_time}g | grep Date | awk -f time_extract.awk string=0` )
# PT121101: what does this do?
#           doy ${target_time}g | grep Date
           hour_init=${hrmin[0]}
           min_init=${hrmin[1]}
           hrmin_string=( `doy ${target_time}g | grep Date | awk -f time_extract.awk string=1` )
           hour_string=${hrmin_string[0]}
           min_string=${hrmin_string[1]}
           echo "Generating ICs for current integration..."
           echo "Integrating from GPS record ${target_time} to ${strt}, ${interval} seconds"
           tmp=graceorbit_supplemental.out
           echo "sh_graceorb -t $year_init $month_init $day_init $hour_init $min_init 0 $interval -n 1 > $tmp"
           sh_graceorb -t $year_init $month_init $day_init $hour_init $min_init 0 $interval -n 1 > $tmp
           echo "Finished preliminary integration"
#           rm $tmp
           GTORB_file=GTORB_${year_init}-${month_init}-${day_init}_${hour_string}-${min_string}-00_${k}_${RL_num}.h5
           echo $GTORB_file
           ICarray=(`grep -h "^${strt}" ${GTORB_file} | head -1 | awk '{print $1, $2, $3, $4, $5, $6, $7}'`)
           grep -h "^${strt}" ${GTORB_file} | head -1 | awk '{print $1, $2, $3, $4, $5, $6, $7}'
           echo "Using ${GTORB_file}"
           echo "GRACE ${k} ICS (m): "${ICarray[@]} 

           echo "Re-extractig data..."
           tar -xvf $record_tar > tar.txt
           rm tar.txt
#           ${datadir}/sw/Bin2AsciiLevel1.e -binfile ${GPS_file}.dat  \
           Bin2AsciiLevel1.e -binfile ${GPS_file}.dat  \
                                           -ascfile ${GPS_file}.asc
           echo "done"

         else
# otherwise extract the ICs from Level 1B GPS data files (GNV1B_*)

           ICarray=(`grep -h "^${strt}" ${GPS_file}.asc | head -1 | awk '{print $1, $4, $5, $6, $10, $11, $12}'`)
           echo "Using ${GPS_file}.asc"
           echo "GRACE ${k} ICS (m): "${ICarray[@]} 
         fi
       fi

       ADJarray=(0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0 0.0)
       if [ "$ICadj" != '0' ]
       then
         ADJarray=(`grep -h "^${k}" $ICadj | head -1 | awk '{print $2/1000., $3/1000., $4/1000., $5/1000., $6/1000., $7/1000., $8, $9, $10, $11, $12, $13}'`)
         echo "GRACE ${k} ADJ (m):" ${ADJarray[@]}
       fi

#      write information IC file required by ORBIT software
       tmp_hrmin_string=( `doy ${strt}g | grep Date | awk -f time_extract.awk string=1` )
       hr_str=${tmp_hrmin_string[0]}

       echo ${ICarray[0]}                 | awk '{printf"%-17d \n",$1}'       >  ICS_${suffix_date}_${hr_str}.${k} # GRACE time
       echo ${ICarray[1]} ${ADJarray[0]}  | awk '{printf"%-18.10f \n",$1+$2}' >> ICS_${suffix_date}_${hr_str}.${k} # Position ICs 1-3 (terrestrial)
       echo ${ICarray[2]} ${ADJarray[1]}  | awk '{printf"%-18.10f \n",$1+$2}' >> ICS_${suffix_date}_${hr_str}.${k}
       echo ${ICarray[3]} ${ADJarray[2]}  | awk '{printf"%-18.10f \n",$1+$2}' >> ICS_${suffix_date}_${hr_str}.${k}
       echo ${ICarray[4]} ${ADJarray[3]}  | awk '{printf"%-18.12f \n",$1+$2}' >> ICS_${suffix_date}_${hr_str}.${k} # Velocity ICs 1-3 (terrestrial)
       echo ${ICarray[5]} ${ADJarray[4]}  | awk '{printf"%-18.12f \n",$1+$2}' >> ICS_${suffix_date}_${hr_str}.${k}
       echo ${ICarray[6]} ${ADJarray[5]}  | awk '{printf"%-18.12f \n",$1+$2}' >> ICS_${suffix_date}_${hr_str}.${k}
       echo $steps >> ICS_${suffix_date}_${hr_str}.${k}        # Number of time steps in integration
       echo $k >> ICS_${suffix_date}_${hr_str}.${k}            # Satellite name (A or B)
       echo $RL | awk '{print substr($1,3,2)}' >> ICS_${suffix_date}_${hr_str}.${k}   # Level 1 data release (RL00 or RL01)

#      A Priori ACC biases before 2003/03/07 A->B satellite swap?
       if [ "${ICarray[0]}" -lt 100267200 ]
       then
         bs1=`(grep ${k}1_ACC_BIAS_SCALE $graceorb_cmdfile | awk -v b1=${ADJarray[6]} -v b2=${ADJarray[7]} -v  b3=${ADJarray[8]} '{print $3+b1,$4+b2,$5+b3,$6,$7,$8,$9,$10,$11}')`
         echo $bs1 >> ICS_${suffix_date}_${hr_str}.${k}
         bs2=`(grep ${k}2_ACC_BIAS_SCALE $graceorb_cmdfile | awk '{print $3,$4,$5,$6,$7,$8,$9,$10,$11}')`
         echo $bs2 >> ICS_${suffix_date}_${hr_str}.${k}
       fi
#       A Priori ACC biases After 2003/03/07 A->B satellite swap?
       if [ "${ICarray[0]}" -ge 100267200 ]
       then
         bs1=`(grep ${k}1_ACC_BIAS_SCALE $graceorb_cmdfile | awk '{print $3,$4,$5,$6,$7,$8,$9,$10,$11}')`
         echo $bs1 >> ICS_${suffix_date}_${hr_str}.${k}
         bs2=`(grep ${k}2_ACC_BIAS_SCALE $graceorb_cmdfile | awk -v b1=${ADJarray[6]} -v b2=${ADJarray[7]} -v b3=${ADJarray[8]} '{print $3+b1,$4+b2,$5+b3,$6,$7,$8,$9,$10,$11}')`
         echo $bs2 >> ICS_${suffix_date}_${hr_str}.${k}
       fi
       scl=`(grep ${k}2_ACC_BIAS_SCALE $graceorb_cmdfile | awk -v s1=${ADJarray[9]} -v s2=${ADJarray[10]} -v s3=${ADJarray[11]} '{print $12+s1, $13+s2, $14+s3}')`
       echo $scl >> ICS_${suffix_date}_${hr_str}.${k}

       L1=`(grep GPS_ANT_${k}_L1 $graceorb_cmdfile | awk '{print $3,$4,$5,$6}')`
       echo $L1 >> ICS_${suffix_date}_${hr_str}.${k}
       L2=`(grep GPS_ANT_${k}_L2 $graceorb_cmdfile | awk '{print $3,$4,$5,$6}')`
       echo $L2 >> ICS_${suffix_date}_${hr_str}.${k}

#exit

     done    # end of satellite loop

# copy the relevant dealiasing files to the run directory (may be better to
# concatenate these in future to produce 1 file) 

     rm range*.dat >& /dev/null
     check="yes"
     if [ $dealias == 'AOD05' ]
     then
       dealias_dir=$dealiasdir/RL05
       dealias_num="05"
     else
       if [ $dealias == 'AOD04' ]
       then
         dealias_dir=$dealiasdir/RL04
         dealias_num="04"
       else
         check="no"
         echo "The specified dealiasing model, $dealias, is not yet implemented"
         exit
       fi
     fi
     if [ $check == 'yes' ]
     then
       prefix=AOD1B_${year}-${month}
       dealias_tar=${dealias_dir}/${prefix}_${dealias_num}.tar.gz
       prefix_nextday=AOD1B_`date -d "$suffix_nextdate" +%Y-%m`
       echo "nextday" $suffix_nextdate
       dealias_tar_nextday=${dealias_dir}/${prefix_nextday}_${dealias_num}.tar.gz

       dealias_file=${prefix}-${day}_X_${dealias_num}.asc
       dealias_fin=${prefix}-${dayf}_X_${dealias_num}.asc
       prefixf6=AOD1B_${yearf6}-${monthf6}
       dealias_f6=${prefixf6}-${dayf6}_X_${dealias_num}.asc
       dealias_tarf6=${dealias_dir}/${prefixf6}_${dealias_num}.tar.gz
# PT121101: check that the data file exists. If not, exit.
       if [ -e $dealias_tar ]
       then
         tar -xvf $dealias_tar --wildcards --no-anchored "*${suffix_date}*" > /dev/null
         tar -xvf $dealias_tar_nextday --wildcards --no-anchored "*${suffix_nextdate}*" > /dev/null
#         rm tar.txt
          echo "Finish unpack"
       else
         echo Input Level-1B dealiasing file does not exist: $dealias_tar
         echo sh_graceorb halted.
         exit
       fi
# APP130204: Changed dealiasing handling so that only one file is used.
#            Fixed error in handlinf of dealias_fin (which used to assume same month and year as initial day
#            Each epoch in the dealiasing file is preceded by a time entry
#            Note that the maximum number of dealiasing entries is nine, this corresponds to a maximum integration
#            length of 48 hours (8 * 6). 

       dealias_time=$(doy $year $month $day 0 0 | grep GRACE | awk '{print $6}')
       dealias_time=${dealias_time/\.*}

# PT130414: set up all the range information for file range_A, then copy it to range_B afterwards
       k=A
       suffix_date=${year}-${month}-${day}

       echo $dealias_time > range_${k}_${suffix_date}.dat
       awk 'NR==5187, NR==10334 {print  $3, $4}' $dealias_file >> range_${k}_${suffix_date}.dat
       dealias_time=$(($dealias_time+21600))
       echo $dealias_time >> range_${k}_${suffix_date}.dat
       awk 'NR==25795, NR==30942 {print  $3, $4}' $dealias_file >> range_${k}_${suffix_date}.dat
       dealias_time=$(($dealias_time+21600))
       echo $dealias_time >> range_${k}_${suffix_date}.dat
       awk 'NR==46403, NR==51550 {print $3, $4}' $dealias_file >> range_${k}_${suffix_date}.dat
       dealias_time=$(($dealias_time+21600))
       echo $dealias_time >> range_${k}_${suffix_date}.dat
       awk 'NR==67011, NR==72158 {print  $3, $4}' $dealias_file >> range_${k}_${suffix_date}.dat
       if [ "$day" != "$dayf" ]
       then
         tar -xvf $dealias_tarf > tar.txt
         rm tar.txt

         dealias_time=$(doy $yearf $monthf $dayf 0 0 | grep GRACE | awk '{print $6}')
         dealias_time=${dealias_time/\.*}

         echo $dealias_time >> range_${k}_${suffix_date}.dat
         awk 'NR==5187, NR==10334 {print  $3, $4}' $dealias_fin >> range_${k}_${suffix_date}.dat
         dealias_time=$(($dealias_time+21600))
         echo $dealias_time >> range_${k}_${suffix_date}.dat
         awk 'NR==25795, NR==30942 {print  $3, $4}' $dealias_fin >> range_${k}_${suffix_date}.dat
         dealias_time=$(($dealias_time+21600))
         echo $dealias_time >> range_${k}_${suffix_date}.dat
         awk 'NR==46403, NR==51550 {print  $3, $4}' $dealias_fin >> range_${k}_${suffix_date}.dat
         dealias_time=$(($dealias_time+21600))
         echo $dealias_time >> range_${k}_${suffix_date}.dat
         awk 'NR==67011, NR==72158 {print  $3, $4}' $dealias_fin >> range_${k}_${suffix_date}.dat
       fi
       if [ "$dayf" != "$dayf6" ]
       then
         tar -xvf $dealias_tarf6 > tar.txt
         rm tar.txt

         dealias_time=$(doy $yearf6 $monthf6 $dayf6 0 0 | grep GRACE | awk '{print $6}')
         dealias_time=${dealias_time/\.*}

         echo $dealias_time >> range_${k}_${suffix_date}.dat
         awk 'NR==5187, NR==10334  {print  $3, $4}' $dealias_f6 >> range_${k}_${suffix_date}.dat
       fi
     fi 
     cp -f range_${k}_${suffix_date}.dat range_B_${suffix_date}.dat

# untar level 1B data files for the appropriate release

     for k in A B
     do

       suffix=${year}-${month}-${day}_${k}_${RL_num}
       suffix_date=${year}-${month}-${day}
       rm SCA_${k}_${suffix_date}.dat >& /dev/null
       rm ACC_${k}_${suffix_date}.dat >& /dev/null
       SCA_file=SCA1B_${suffix}
       ACC_file=ACC1B_${suffix}

# convert star camera, accelerometer, and GPS data files to ascii format

       echo "extracting ascii files..."
       Bin2AsciiLevel1.e -binfile ${SCA_file}.dat  -ascfile ${SCA_file}.asc
       Bin2AsciiLevel1.e -binfile ${ACC_file}.dat  -ascfile ${ACC_file}.asc
       echo "done"

# construct accelerometer and star camera files required by graceorbit

       echo "Constructing SCA_"${k}"_"${suffix_date}".dat & ACC_"${k}"_"${suffix_date}".dat..."
       echo "${record_dir}/SCA1B_${suffix}.dat"
# PT140819: also output the camera number [1, 2, 3(none), 4(both)]
       awk 'NR>24 {print $1, $4, $5, $6, $7, $3}' ${SCA_file}.asc > SCA_${k}_${suffix_date}.dat
       awk 'NR>24 {print $1, $3, $4, $5}' ${ACC_file}.asc > ACC_${k}_${suffix_date}.dat

# special case if integration interval crosses into next day

       if [ "$day" != "$dayf" ]
       then
         suff_f=${year}-${month}-${dayf}_${RL_num}
         record_f_tar=$record_dir/grace_1B_${suff_f}.tar.gz
         echo "untarring finish time data files..."
         tar -xvf $record_f_tar > tar.txt
         rm tar.txt
         suffixf=${year}-${month}-${dayf}_${k}_${RL_num}
         SCA_filef=SCA1B_${suffixf}
         ACC_filef=ACC1B_${suffixf}

         Bin2AsciiLevel1.e -binfile ${SCA_filef}.dat   -ascfile ${SCA_filef}.asc
         Bin2AsciiLevel1.e -binfile ${ACC_filef}.dat  -ascfile ${ACC_filef}.asc

         awk 'NR>24 {print $1, $4, $5, $6, $7}' ${SCA_filef}.asc >> SCA_${k}_${suffix_date}.dat
         awk 'NR>24 {print $1, $3, $4, $5}' ${ACC_filef}.asc >> ACC_${k}_${suffix_date}.dat

         if [ "$dayf" != "$dayf6" ]
         then
           suff_f6=${yearf6}-${monthf6}-${dayf6}_${RL_num}
           record_f6_tar=$record_dir/grace_1B_${suff_f6}.tar.gz
           echo "untarring f6 data files..."
           tar -xvf $record_f6_tar > tar.txt
           rm tar.txt
           suffixf6=${yearf6}-${monthf6}-${dayf6}_${k}_${RL_num}
           SCA_filef6=SCA1B_${suffixf6}
           ACC_filef6=ACC1B_${suffixf6}
           Bin2AsciiLevel1.e -binfile ${SCA_filef6}.dat   -ascfile ${SCA_filef6}.asc
           Bin2AsciiLevel1.e -binfile ${ACC_filef6}.dat  -ascfile ${ACC_filef6}.asc

           awk 'NR>24 {print $1, $4, $5, $6, $7}' ${SCA_filef6}.asc >> SCA_${k}_${suffix_date}.dat
           awk 'NR>24 {print $1, $3, $4, $5}' ${ACC_filef6}.asc >> ACC_${k}_${suffix_date}.dat
         fi
       fi
       echo "done"

# PT170509: generate the atmospheric loading file but with the atm tides removed
# PT170615: also generate the accelerometer data with a rate and quadratic removed from the cross-track component
       if [ "$k" == "A" ] 
       then
         ${version}/com/sh_make_daily_AOD1B ${year} ${month} ${day}
         # Accelerometer file
         ${version}/com/sh_extract_level1B $year $month $day ACC RL$RL_num
         ${version}/com/sh_extract_level1B $year $month $day THR RL$RL_num
         echo ${version}/util/model_acc ${year} ${month} ${day} 2 2
         ${version}/util/model_acc ${year} ${month} ${day} 2 2
# PT170615: check that there is no UTIL.fatal file
         if [ -f UTIL.fatal ]
         then
           echo Halt processing
           exit
         fi
       fi

      echo "--------- Run integrator for satellite $k --------->"
#      run the orbit integrator      
# PT130414: don't copy this anymore - use ICS.${k} directly
#       cp ICS.${k} ICS

       hrmin_string=( `doy ${strt}g | grep Date | awk -f time_extract.awk string=1` )
       hour_string=${hrmin_string[0]}
       min_string=${hrmin_string[1]}

rm in_file_${k}_${year}-${month}-${day}_${hour_string} >& /dev/null
# PT121101: I've turned off in graceorb the need to read the ut1. nutabl. pole. soltab. luntab. so deleted them here from between ACC.dat and coeffs_200
# PT130225: Tony has now replaced the range0.dat-range8.dat with a single file, range.dat
# PT130903: replace the (erroneous) coeffs_200 with GOCE.deg200
# PT170509: change the name of the default tide grid file to be the netcdf file for the FES2015 model (FES2014 + Padman Antarctic tide model)
# PT170509: change the "range_" file to the new aod file that doesn't contain the atm tide
# PT170509: add the ocean mascon file name
cat > in_file_${k}_${year}-${month}-${day}_${hour_string} << END
$graceorb_cmdfile
GTORB_${year}-${month}-${day}_${hour_string}-${min_string}-00_${k}_${RL_num}.h5
ICS_${suffix_date}_${hour_string}.${k}
$mascon_dir/mascons_stage4
$mascon_dir/ocean_mascons_stage2
$mascon_dir/mascons_stage4.flag
def_grav.dat
aod_${suffix_date}.asc
SCA_${k}_${suffix_date}.dat
ACC_${k}_${suffix_date}.asc
GOCE.deg200
desaicoeff
../tide_mascons/FES2015_${year}-${month}-${day}.nc
END


# PT121101: it is now called "graceorb" and we expect it to be on the path
#       ../src_new/orbit < in_file
# PT130414: graceorb will now read the name of this file from the command line, then open and read it.
#       graceorb < in_file
# PT130414: add the yawerr, pitcherr, rollerr to the command line
       if [ $setup_only == "Y" ]
       then
         echo Setup only, so exiting from script. Not running graceorb or gracefit.
       else
         if [ $k == "A" ]
         then
           echo Runstring: ${version}/graceorb/graceorb $graceorb_cmdfile  in_file_${k}_${year}-${month}-${day}_${hour_string} $roll_A    $pitch_A    $yaw_A  0 0 0
           ${version}/gracefit/graceorb $graceorb_cmdfile  in_file_${k}_${year}-${month}-${day}_${hour_string} $roll_A    $pitch_A    $yaw_A  0 0 0
         else
           echo Runstring: ${version}/graceorb/graceorb $graceorb_cmdfile  in_file_${k}_${year}-${month}-${day}_${hour_string} $roll_B    $pitch_B    $yaw_B  0 0 0
           ${version}/graceorb/graceorb $graceorb_cmdfile  in_file_${k}_${year}-${month}-${day}_${hour_string} $roll_B    $pitch_B    $yaw_B  0 0 0 
         fi 
       fi

     done  
# PT121102: we may now want to keep the GNV1B and the KBR1B for use in gracefit
   if [ $run_gracefit == "Y" ]
   then
     rm [A-F,H-J,L-S,U-Z]1B_*[AB]_${RL_num}.asc ???1B_*_[ABX]_${RL_num}.dat AOD*.asc ACC1B*asc SCA1B*asc   ???1B_*_[ABX]_${RL_num}.rpt  GPS1B*.dat
     ${version}/com/sh_extract_level1B $year $month $day KBR RL$RL_num
     ${version}/com/sh_extract_level1B $year $month $day THR RL$RL_num
     echo ${version}/gracefit/gracefit ${gracefit_cmdfile} ANU_${year}-${month}-${day}_${hour_string}.rms 4 GTORB_${year}-${month}-${day}_${hour_string}-${min_string}-00_A_${RL_num}.bin GTORB_${year}-${month}-${day}_${hour_string}-${min_string}-00_B_${RL_num}.bin ${year} ${month} ${day}  0 0 0  0 0 0                                   
     ${version}/gracefit/gracefit ${gracefit_cmdfile} ANU_${year}-${month}-${day}_${hour_string}.rms 4 GTORB_${year}-${month}-${day}_${hour_string}-${min_string}-00_A_${RL_num}.bin GTORB_${year}-${month}-${day}_${hour_string}-${min_string}-00_B_${RL_num}.bin ${year} ${month} ${day} 0 0 0  0 0 0                                   

   fi

# PT130513: delete everything except the ACC GNV and KBR files
#   rm [B-F,H-J,L-S,T-Z]1B*.asc ???1B*.rpt ???1B_*_[AB]_${RL_num}.dat >& /dev/null

   COUNTER=$(($COUNTER+1))
   done


# PT150901: regenerate the KBR and THR files so that GRACEFIT can run
   ${version}/com/sh_extract_level1B $year $month $day THR RL$RL_num
   ${version}/com/sh_extract_level1B $year $month $day KBR RL$RL_num
exit
