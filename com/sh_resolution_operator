#!/bin/csh -f

# script to calculate and plot the resolution operator to gain insights into the leakage introduced through regularisation.
# This is based on the work in Loomis et al (J. Geod, 2019, Equation 18 and Figure 6).
#
# P. Tregoning 
# 22 September 2020

set version = "~/gt"

if ($#argv == 0) then
  echo "sh_resolution_operator output_file AtWA_file mascon_file regularisation_file soln.vcv lambda [plot_only]"
  exit
endif

set output_file = $1
set AtWA_file = $2
set mascon_file = $3
set reg_file = $4
set soln_vcv = $5
set lambda = $6

# extract the mascon EWH values from the solution vcv file
grep MC $soln_vcv | awk '{print $5, $6}' > msc.EWH

if($#argv == 7)goto skip
# calculate the resolution operator. This creates file res_operator.out, a matrix with dimensions nmascon_t x nmascon_t. File has one header line
echo ${version}/util/resolution_operator $AtWA_file $reg_file msc.EWH $output_file $lambda
${version}/util/resolution_operator $AtWA_file $reg_file msc.EWH $output_file $lambda

skip:

plot:
set outfile = $output_file'.ps'
set proj = "-JR30/18"
set range = "-Rg"

#gmt makecpt -Chaxby -T-0.105/0.105/0.01 > res_op.cpt
gmt makecpt -Chaxby -T-0.805/0.805/0.05 > res_op.cpt

# extract the coordinates of the primary mascons from the mascon file
cat $mascon_file | awk '{if (substr($0,8,3) == "  P") {print $6, $5, $1} }' > msc.lonlat

# get the number of mascons
set nmsc = `head -1 $output_file | awk '{print $1}'`

# now match up the resolution error with the coords
tail +2 $output_file | head -$nmsc | awk '{print $2}' > tmp.dat
paste msc.lonlat tmp.dat | awk '{printf "%10.4f %10.4f %12.4f %10d\n", $1, $2, $4, $3}' > R.dat
gmt gmtinfo R.dat

# now plot it 
gmt psxy R.dat $proj $range -Ba1000news:."$reg_file": -Sc0.15 -Cres_op.cpt -X1 -Y18 -P -K > $outfile
gmt pscoast $proj $range -A10000 -W1,darkgrayV004c_re -Dc -O -K >> $outfile
gmt psscale -D9/-1/15/0.4h -Cres_op.cpt -Ba0.3f0.1:"Resolution error (m)": -O -K >> $outfile

gs $outfile



