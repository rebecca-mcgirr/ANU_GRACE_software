#!/bin/csh -x

# script to generate a time series of integrated EWH change for a region
#
# P. Tregoning
# 17 January 2020


if ($#argv == 0) then
  echo "sh_integrate_region -region Amazon -series _batch5z_zeroapr_iter2_min20 -poly ./mascon.polygons -y ymin ymax -x xmin xmax -yanot 200f100 -xanot 4f2"
  exit
endif

###########################    SET DEFAULT VALUES    ###########################
set version = ~/gt
set ymin = -3000
set ymax =  3000
set xmin = 2002
set xmax = 2021 
set yanot = 1000f500
set xanot = 4f2     
set series = "_batch5z_zeroapr_iter2_min20"
set msc_file = ~/gg/grace/tables/mascons_stage4_V003a
set polygon_file = ~/gg/grace/tables/mascon.polygons
set land_type = "Land"
set GSFC_dir = "N"
set fit_dir = ~/fft/batch7/stage2_200km
################################################################################


##################### DECIPHER COMMAND LINE #######################
while ($#argv > 0 )
  set input = ( $argv )
  switch($input[1])
    case -version:
      set version = $input[2]
      echo software version to use: $version
    breaksw
    case -msc_file:
    case -mascon_file:
    case -mascon*:
      set msc_file  = $input[2]
    breaksw
    case -region:
      set region  = $input[2]
    breaksw
    case -series:
      set series  = $input[2]
    breaksw
    case -y:
      set ymin = $input[2] ; shift argv  
      set ymax = $input[3] ; shift argv
    breaksw
    case -yanot:
      set yanot = $input[2]
    breaksw
    case -x:
      set xmin = $input[2] ; shift argv  
      set xmax = $input[3] ; shift argv
    breaksw
    case -xanot:
      set xanot = $input[2]
    breaksw
    case -poly*:
      set polygon_file = $input[2]
    breaksw
    case -land*:
      set land_type = $input[2]
    breaksw
    case -GSFC:
      set GSFC_dir = $input[2]
    breaksw
    case -dir:
      set fit_dir = $input[2]
    breaksw
 endsw
  if ( $#argv > 0 ) shift argv
end
alldone:
######################################################################

goto plot



# make a list of the available fit files
echo make a list of solution fit files
 # PT211007 this was the old way. Now expect all files in the same directory
 #ls ~/fft/20??/addnorm_????_??_fft${series}.fit | wc -l > msc${series}.list
 #ls ~/fft/20??/addnorm_????_??_fft${series}.fit        >> msc${series}.list
ls ${fit_dir}/addnorm_????_??${series}.fit | wc -l  > msc${series}.list
ls ${fit_dir}/addnorm_????_??${series}.fit         >> msc${series}.list

# now, identify the primary mascons that lie within the requested region and with the correct density
echo identify all primary mascons in region $region
\rm msc_${region}${series}.list >& /dev/null
echo $version/util/grab_mascons $msc_file /dev/null  $polygon_file $region $land_type -1 
$version/util/grab_mascons $msc_file /dev/null  $polygon_file $region $land_type -1 | grep -i "primary mascon" | grep "is in region" | awk '{print $4, $10, $13, $14, $15}' > tmp.msc
wc -l tmp.msc > msc_${region}${series}.list
cat tmp.msc >> msc_${region}${series}.list


# now call the program to perform the integration
echo $version/util/integrate_mascons msc_${region}${series}.list msc${series}.list
$version/util/integrate_mascons msc_${region}${series}.list msc${series}.list | grep -v STATUS | awk '{print $1, $3*1.e3, $2}' > ${region}${series}.dat


plot:
set outfile = ${region}${series}.ps
set proj = "-JX15/10"
set range = "-R$xmin/$xmax/$ymin/$ymax"

gmt gmtinfo  ${region}${series}.dat
gmt psxy ${region}${series}.dat -W1,red $proj $range -Ba${xanot}/${yanot}:"EWH (mm)"::."$region$series":neSW -X3.5 -Y3 -P -K > $outfile

# now the GSFC basin, if requested
if ($GSFC_dir != "N" && $region == "Amazon")then
  cat ${GSFC_dir}/GSFC_basin8030050_AmazonRiver.csv | awk '{print $1, $2*10  }' > ${GSFC_dir}/GSFC_basin_Amazon.tmp
  gmt gmtinfo ${GSFC_dir}/GSFC_basin_Amazon.tmp
  gmt psxy ${GSFC_dir}/GSFC_basin_Amazon.tmp -W1,blue $proj $range  -O -K >> $outfile

else if($GSFC_dir != "N" && ($region == "Grnld2" || $region == "Greenland") )then
  tail -n+11 ${GSFC_dir}/GSFC_region0100_GreenlandIceSheet.csv | sed s/","/" "/ | awk '{print $1, $2*10 - 300. }' > ${GSFC_dir}/GSFC_basin_Greenland.tmp
  gmt gmtinfo ${GSFC_dir}/GSFC_basin_Greenland.tmp
  gmt psxy ${GSFC_dir}/GSFC_basin_Greenland.tmp -W1,blue $proj $range -O -K >> $outfile

else if($GSFC_dir != "N" && $region == "Australia")then
  cat ${GSFC_dir}/GSFC_basin8080090_Tasmania.csv | awk '{print $1, $2*10 }' >! ${GSFC_dir}/GSFC_basin_Australia
  foreach i (GSFC_basin8080050_EasternCoastOfAustralia.csv GSFC_basin8080010_WesternCoastOfAustralia.csv GSFC_basin8080020_NorthernCoastOfAustralia.csv GSFC_basin8080030_CentralAustralia.csv GSFC_basin8080040_SouthernCoastOfAustralia.csv )
    paste ${GSFC_dir}/GSFC_basin_Australia ${GSFC_dir}/$i |  awk '{print $1, $2 + $4*10.}' > tmp ; mv tmp ${GSFC_dir}/GSFC_basin_Australia
  end
  gmt psxy ${GSFC_dir}/GSFC_basin_Australia -W1,blue $proj $range -O -K >> $outfile

else if ($GSFC_dir != "N" && $region == "MurrayDB")then
  cat ${GSFC_dir}/GSFC_basin8080060_MurrayDarling.csv | awk '{print $1, $2*10  }' > ${GSFC_dir}/GSFC_basin_MurrayDB.tmp
  gmt psxy ${GSFC_dir}/GSFC_basin_MurrayDB.tmp -W1,blue $proj $range -O -K >> $outfile

else if ($GSFC_dir != "N" && $region == "Tasmania")then
  cat ${GSFC_dir}/GSFC_basin8080090_Tasmania.csv | awk '{print $1, $2*10  }' > ${GSFC_dir}/GSFC_basin_Tasmaniatmp
  gmt psxy ${GSFC_dir}/GSFC_basin_Tasmania.tmp -W1,blue $proj $range -O -K >> $outfile

else if ($GSFC_dir != "N" && $region == "Casp")then
  cat ${GSFC_dir}/GSFC_region9004_CaspianSea.csv | awk '{print $1, $2*10  }' > ${GSFC_dir}/GSFC_basin_Caspian.tmp
  gmt psxy ${GSFC_dir}/GSFC_basin_Caspian.tmp -W1,blue $proj $range -O -K >> $outfile


endif

# add a plot of the region, with dots for land and ocean primary mascons that have been included
tail -n+2 msc_${region}${series}.list | awk '{if ($5 < 1010) {print $4, $3, 1} else {print $4, $3, 0}}' > msc.lonlat
tail -n+2 Greenland_stage2_200km.mascons | awk '{if ($5 < 1010) {print $4, $3, 1} else {print $4, $3, 0}}' > Greenland_msc.lonlat

# set range
if($region == "Grnld2")then
  set range = "-R270/355/55/85"
  set proj = "-JM8"
else
  set proj = "-JR30/10"
  set range = "-Rg"
endif

gmt makecpt -Cgrace -I -T0/1/0.1 > msc.cpt

gmt psxy msc.lonlat $proj $range -Sc0.3 -Cmsc.cpt -Y+12 -O -K >> $outfile
gmt psxy Greenland_msc.lonlat $proj $range -Sc0.3 -Cmsc.cpt -O -K >> $outfile
gmt pscoast $proj $range  -Ba1000nesw -Dl -W0.5 -O -K >> $outfile
gmt psxy stage2_200km.perimeters -: $proj $range -W0.1,lightblue -O -K >> $outfile
gs $outfile





