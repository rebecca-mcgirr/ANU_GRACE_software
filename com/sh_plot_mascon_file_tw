#!/bin/csh -f

# script to plot the new mascon file developed in November 2016.
#  - uses colour_mascons to set mascon colours and create input files for GMT 
# 
# PT170322: modified to work under gmt5
# PT170421: add -prim_num option to print primary mascon numbers
#
#
# The mascon file contains 3-tiered information on primary, secondary and ternary mascons:
#
##00000    4581    4581 1485118       1   69390   69390
## setup by initialize_mascons  20161109 123654.048 +1100
## modified by classify_mascons  20161109 123748.231 +1100
## modified by separate_mascons to remove mixed ocean/land primary mascons.  Continental shelf depth: -150.000
#1  PDeep       1    227   89.0588  185.7386  6356752.3   87393425632.  -4228.0 1029.   0.0     0       Ocean
#1  SDeep     227          89.0588  185.7386  6356752.3   87393425632.  -4228.0 1029.     1   317       Ocean
#1  TDeep    90.0000    0.0000  6356752.3     269748154.  -4228.0 1029.     1     1   317     0         Ocean
#2  TDeep    89.8333   60.0000  6356752.5     359663635.  -4219.0 1029.     1     1   317     0         Ocean
#3  TDeep    89.8333  120.0000  6356752.5     359663635.  -4187.5 1029.     1     1   317     0         Ocean


### Primary line
#prim_no Type num_secs num_terns  lat  lon    radius        area     bathy/topo density %land tidemask region_name
#1  PDeep       1    227   89.0588  185.7386  6356752.3   87393425632.  -4228.0 1029.   0.0     0       Ocean

# secondary line
#sec_no Type num_terns      lat      lon       radius      area       bathy/topo density      col      region_name
#1  SDeep     227          89.0588  185.7386  6356752.3   87393425632.  -4228.0 1029.     1   317       Ocean

# ternary line
#tern_no  label  lat      lon    radius         area    bathy/topo density prim  sec col_prim col_sec  region_name
#1  TDeep    90.0000    0.0000  6356752.3     269748154.  -4228.0 1029.     1     1   317     0         Ocean

gmt gmtset FONT_TITLE 15    >& /dev/null
gmt gmtset FONT_LABEL   15  >& /dev/null
gmt gmtset PAPER_MEDIA a4+  >& /dev/null
gmt gmtset PROJ_LENGTH_UNIT cm  

if ($#argv == 0) then
  echo "sh_plot_mascon_file -f input_file -fit fit_file -msc_type sec/tern -wrt prim/sec/tern "
  echo "           -r minlat minlon maxlat maxlon -plot Y/N -ant_plot Y/N -arctic_plot Y/N  -y miny maxy step_y "
  echo "           -dot Y/N -polygon poly_file"
  echo "           -epoch start end  -gr plt_junk.kb plt_junk2.kb ... etc (the -gr argument must be last if used)"
  echo " Note: option '-wrt tern' without a fit file will plot primary mascon numbers on <msc_type> mascon points"
  echo "       (may be hard to read in large areas) "
  echo " "
  echo ' use "-prim_num Y" to print primary mascon numbers'
  echo " "

  echo Colour coding:
  grep \!\!\! ~/gg/grace/util/colour_mascons.f90 |sed s:\!::g
  exit
endif

##############################  Define default values      ##############################
set fit_file = ""
# set default mascon file
set msc_file_in = ~/gt/tables/mascons_stage4

set groundtrack_files = ""
set msc_type = tern
set wrt = prim
set plot = "Y"
set convert = "N"
set minlat = -90
set minlon = -160
set maxlat = 90
set maxlon = 200
set colour_mascons = ~/gt/util/colour_mascons
#set colour_mascons=./colour_mascons
set ant_plot = "N"
set arctic_plot = "N"
set min_y = -805 
set max_y = 805 
set step_y = 1
set yset = "N"
set epoch1 = 1
set epoch2 = 17280
set user_dot = "N"
set user_dot_size = 0.1
set yanot = "300f150"
set poly_file = ""
set colourmap = "haxby"
set prim_nums = "N"
set trim = "N"
set xmin = 0
set xmax = 18000
set reverse = " -I "
############################## Decipher input command line ##############################
while ($#argv > 0 )
  set input = ( $argv )
  switch($input[1])
    case -f:
      set msc_file_in = $input[2]
    breaksw
    case -fit:
      set fit_file = $input[2]
    breaksw
    case -r:
    case -R:
      set minlat  = $input[2]
      set minlon  = $input[3]
      set maxlat  = $input[4]
      set maxlon  = $input[5]
    breaksw
    case -m*:
      set msc_type  = $input[2]
    breaksw
    case -w*:
      set wrt  = $input[2]
    breaksw
    case -plot:
      set plot  = $input[2]
    breaksw
    case -ant*:
      set ant_plot  = $input[2]
      if($ant_plot == "Y")then
        set minlat = -90
        set minlon = 0
        set maxlat = -60
        set maxlon = 360     
      endif
    breaksw
    case -arctic*:
      set arctic_plot  = $input[2]
      if($arctic_plot == "Y")then
        set minlat = 58 
        set minlon = 0
        set maxlat = 90 
        set maxlon = 360     
      endif
    breaksw
    case -dot:
      set user_dot = "Y"
      set user_dot_size  = $input[2]
      echo User wants dot size of $user_dot_size
    breaksw
    case -y:
        set min_y = $input[2]
        set max_y = $input[3]
        set step_y = $input[4]
        set yset="Y"
    breaksw
    case -yanot:
      set yanot  = $input[2]
    breaksw
    case -epoch:
    case -x:
        set epoch1 = $input[2]
        set epoch2 = $input[3]
    breaksw
    case -poly*:
      set poly_file = $input[2]
    breaksw
    case -gr*:
      set groundtrack_files = (`echo $argv | cut -d- -f2`); shift groundtrack_files
    breaksw
    case -colour*:
      set colourmap  = $input[2]
    breaksw
    case -reverse:
      set reverse  = " "
    breaksw
    case -convert*:
      set convert  = $input[2]
      echo will convert to gif
    breaksw
    case -prim_num*:
      set prim_nums  = $input[2]
    breaksw
 endsw
  if ( $#argv > 0 ) shift argv
end
echo $msc_file_in

if ( ! -f $msc_file_in ) then
    echo "cannot find input file: " $msc_file_in
    exit 2
    endif

alldone:

###############################################
#  primary mascons to show primary ID        ##
###############################################
if ($msc_type == "prim") then
    set opt="-pt"
    endif

###############################################
#  secondary mascons to show primary mascons ##
###############################################
if ($msc_type == "sec") then
    set opt="-sp"
    endif

###############################################
#   ternary mascons to show primary mascons  ##
###############################################
if ($msc_type == "tern" && $wrt == "prim") then
    set opt="-tp"
    endif

###############################################
#  ternary mascons to show secondary mascons ##
###############################################
if ($msc_type == "tern" && $wrt == "sec") then  
    set opt="-ts"
    endif

###############################################
#   ternary mascons to show ternary mascons  ##
###############################################
if ($msc_type == "tern" && $wrt == "tern") then  
    set opt="-tt"
    endif

######################################################################
echo "Option "$opt " - plot "$msc_type" mascons to show geometry of "$wrt" mascons"

# set colours and write GMT plot file

set range = "$minlat $minlon $maxlat $maxlon"
echo "coordinate range: Lat $minlat $maxlat  Lon $minlon $maxlon"
# colour_mascons now handles cases where the longitude range spans -ve to +ve -HM 161205
echo $colour_mascons $opt $minlat $minlon $maxlat $maxlon $msc_file_in $fit_file
$colour_mascons $opt $minlat $minlon $maxlat $maxlon $msc_file_in $fit_file


# merge groundtrack files into one
echo Groundtrack files: $groundtrack_files
\rm groundtrack.kb ; echo "groundtrack files: " $groundtrack_files > groundtrack.kb
if (`echo $groundtrack_files | wc -w`  > 0 )then
  head -7 $groundtrack_files[1] >> groundtrack.kb
  foreach file ($groundtrack_files)
    tail -n+7 $file >> groundtrack.kb
  end
endif
  

plot:

# set titles
if($fit_file  == "") then
  set pname=`basename $msc_file_in`
  set plot_title = $pname$opt
  set outfile = plot_$plot_title.ps
else
  set pname=`basename $fit_file`
  set plot_title = $pname" fit"
  set outfile = plot_$pname.ps
endif

# set colour pallette
if($yset == "Y")then
  echo "yscale set: min,max,step =  " $min_y $max_y $step_y
else
#if($wrt != "tern")then
#  set colour_range = `minmax msc_to_plot.dat | awk '{print $7}' | sed s/"<"/" "/ | sed s/">"/" "/ | sed s/"\/"/" "/ | awk '{print $1 - 50, $2 + 50}'`
#   endif
  echo "default colour range used"
endif

set colour_range = ($min_y $max_y)
echo colour range and step used in plot: $colour_range $step_y $wrt 
echo gmt makecpt -C$colourmap -T$colour_range[1]/$colour_range[2]/$step_y $reverse
gmt makecpt -C$colourmap -T$colour_range[1]/$colour_range[2]/$step_y $reverse > msc.cpt
#gmt makecpt -Cpolar -I -T$colour_range[1]/$colour_range[2]/$step_y > msc.cpt



set mid_lon = `echo $minlon $maxlon | awk '{print ($1 + $2) / 2.0}'`
set dot_size = `echo $minlon $maxlon | awk '{if ($2 - $1 > 180) {print 0.01} else {print 0.1}}'`
# override this if we are plotting secondary mascons wrt primary
if ($msc_type == "sec")set dot_size = 0.3


## PT161130: change the projection if we want a stereographic plot of one of the poles
if($ant_plot == "Y")then
  set proj = `echo $maxlat | awk '{printf "-JS0/-89.9/%4.1f/15\n", $1 + 90.}'`
  set dot_size = 0.2
  echo Will plot stereographic Antarctic plot $proj
else if ($arctic_plot == "Y")then
  set proj = `echo $minlat | awk '{printf "-JS0/89.9/%4.1f/15\n", 90. - $1 }'`
else
  set proj = "-JR${mid_lon}/18"
endif


# PT170119: over-ride the dot size settings above if the user entered one
if($user_dot == "Y")then
  set dot_size = $user_dot_size
  echo setting dot size to user_specified value of $dot_size
endif

# PT170421: extract primary mascon numbers in a format to print if required
if($prim_nums == "Y")then
  grep "  P" $msc_file_in | awk '{print $6, $5, "12,1,black 0   LB", $1}' > prim_nums.dat
endif


###########################
###                     ###
###  The plotting part  ###
###                     ###
###########################
echo poly_file = $poly_file
# plot the mascons
if($wrt != "tern")then
  echo plotting ternary mascons ...
  gmt psxy msc_to_plot.dat -: $proj -R$minlon/$maxlon/$minlat/$maxlat -Ba1000:."$plot_title":nesw -Sc$dot_size -Cmsc.cpt -X1 -Y5 -P -K > $outfile
  gmt pscoast $proj -R$minlon/$maxlon/$minlat/$maxlat -O -K -Wthin,100/100/100 -A10000 >> $outfile
# PT170214: add the capability to plot a polygon around a region
  echo now maybe plot the polygon ....
  if($poly_file != "")gmt psxy $proj -R$minlon/$maxlon/$minlat/$maxlat -O -K $poly_file -Wthin,2/0/0/0 -: >> $outfile

  gmt psscale -Cmsc.cpt -D9/-1.5/15/0.5h -Ba$yanot -O -K >> $outfile
else
# plot the ternary mascon numbers only
  echo plot ternary numbers only
  gmt pscoast -Wthin,255/0/0  $proj -R$minlon/$maxlon/$minlat/$maxlat -Ba1000:."$msc_file_in ternary numbers":nesw -X1 -Y5 -P -K > $outfile
  gmt pstext msc_to_plot.txt -: $proj -R$minlon/$maxlon/$minlat/$maxlat -O -K >> $outfile 
endif

# PT170421: plot the primary numbers if requested
if($prim_nums == "Y")then
  echo plot primary mascon numbers
  gmt pstext prim_nums.dat $proj -R$minlon/$maxlon/$minlat/$maxlat -F+f+a+j -O -K >> $outfile 
endif

# plot a groundtrack if required
if (`echo $groundtrack_files | wc -w` > 0)then
  echo "Plotting satellite groundtrack from file(s)" $groundtrack_files  ...
  tail -n+8 groundtrack.kb | awk -v ep1=$epoch1 -v ep2=$epoch2 '$1>ep1 && $1<ep2 {print $4, $3}' > groundtrack.lonlat
  gmt psxy groundtrack.lonlat $proj -R$minlon/$maxlon/$minlat/$maxlat -Wthin,200/200/200  -O -K >> $outfile
endif

if($convert == "Y")then
  echo convert $outfile ${outfile}.gif
  convert $outfile ${outfile}.gif
endif

if($plot == "Y")gs $outfile









